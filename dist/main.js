(()=>{"use strict";var e={430:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const l=i},208:(e,n,t)=>{t.d(n,{A:()=>l});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([e.id,'html {\n  user-select: none;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-container {\n  display: flex;\n  gap: 20px;\n  justify-content: start;\n  align-items: start;\n}\n\n.container-one,\n.container-two,\n.container-three {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n.p-game-board,\n.c-game-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n.d-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n}\n\n.cell {\n  position: relative;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.cell:hover {\n  z-index: 99;\n  transform: scale(1.2);\n  border-width: 2px;\n  /* background-color: rgb(172, 234, 172); */\n\n  cursor: pointer;\n}\n\n.cell.over {\n  background-color: #a9ffa9;\n}\n\n.cell.over--invalid {\n  background-color: #ffd0cb;\n}\n\n.copy-cursor {\n  cursor: copy !important;\n}\n\n.cell--ship {\n  background-color: #a9a9ff;\n}\n\n.cell--unavailable {\n  background-color: #d8d8d8;\n}\n\n.cell--undiscovered {\n  background-color: rgba(255, 255, 255, 0.851) !important;\n}\n\n.cell--miss {\n  background-color: #fafad2;\n  position: relative;\n}\n\n.cell--miss::after {\n  content: ""; /* Required for the pseudo-element to be generated */\n  position: absolute;\n  width: 5px; /* Size of the dot */\n  height: 5px; /* Size of the dot */\n  background-color: black; /* Color of the dot */\n  top: 50%; /* Center vertically */\n  left: 50%; /* Center horizontally */\n  border-radius: 50%; /* Makes the shape a circle */\n  transform: translate(-50%, -50%); /* Offset the dot to truly center it */\n}\n\n.cell--hit {\n  position: relative;\n  background-color: #fafad2;\n  border-color: #ff0000;\n  border-width: 1.5px;\n}\n\n.cell--hit::before,\n.cell--hit::after {\n  content: "";\n  position: absolute;\n  width: 2px; /* Width of the "X" lines */\n  height: 150%; /* Adjusted to fit the square */\n  top: -25%; /* Adjusted for better centering */\n  left: 50%; /* Center horizontally */\n  background-color: red; /* Color of the "X" */\n  transform: translateX(-50%); /* Center the line\'s width */\n}\n\n.cell--hit::before {\n  transform: translateX(-50%) rotate(45deg); /* Center and rotate one line to form one slash of the "X" */\n}\n\n.cell--hit::after {\n  transform: translateX(-50%) rotate(-45deg); /* Center and rotate the other line to form the other slash of the "X" */\n}\n\n.next-piece-box {\n  height: 150px;\n  width: 150px;\n  border: 2px solid black;\n  border-radius: 10px;\n  background-color: rgb(238, 238, 238);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.ship-draggable {\n  display: grid;\n  grid-template-rows: 30px;\n}\n\n.ship-draggable.ship-draggable--size-4 {\n  grid-template-columns: repeat(4, 30px);\n}\n.ship-draggable.ship-draggable--size-3 {\n  grid-template-columns: repeat(3, 30px);\n}\n.ship-draggable.ship-draggable--size-2 {\n  grid-template-columns: repeat(2, 30px);\n}\n.ship-draggable.ship-draggable--size-1 {\n  grid-template-columns: repeat(1, 30px);\n}\n\n.ship-cell-drag {\n  background-color: #a9a9ff;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.d--game-over-screen {\n  background-color: #a9ffa9;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 30px;\n}\n\nh2 {\n  font-size: 20px;\n}\nh3 {\n  font-size: 30px;\n}\nh4 {\n  font-size: 20px;\n}\n\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iBAAiB;AACnB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,aAAa;EACb,SAAS;EACT,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;;;EAGE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,SAAS;AACX;;AAEA;;EAEE,uBAAuB;EACvB,aAAa;EACb,4CAA4C;EAC5C,aAAa;EACb,YAAY;EACZ,aAAa;EACb,sCAAsC;EACtC,mCAAmC;AACrC;AACA;EACE,uBAAuB;EACvB,aAAa;EACb,4CAA4C;EAC5C,aAAa;EACb,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,sCAAsC;AACxC;;AAEA;EACE,WAAW;EACX,qBAAqB;EACrB,iBAAiB;EACjB,0CAA0C;;EAE1C,eAAe;AACjB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,uDAAuD;AACzD;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,WAAW,EAAE,oDAAoD;EACjE,kBAAkB;EAClB,UAAU,EAAE,oBAAoB;EAChC,WAAW,EAAE,oBAAoB;EACjC,uBAAuB,EAAE,qBAAqB;EAC9C,QAAQ,EAAE,sBAAsB;EAChC,SAAS,EAAE,wBAAwB;EACnC,kBAAkB,EAAE,6BAA6B;EACjD,gCAAgC,EAAE,sCAAsC;AAC1E;;AAEA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;;EAEE,WAAW;EACX,kBAAkB;EAClB,UAAU,EAAE,2BAA2B;EACvC,YAAY,EAAE,+BAA+B;EAC7C,SAAS,EAAE,kCAAkC;EAC7C,SAAS,EAAE,wBAAwB;EACnC,qBAAqB,EAAE,qBAAqB;EAC5C,2BAA2B,EAAE,4BAA4B;AAC3D;;AAEA;EACE,yCAAyC,EAAE,4DAA4D;AACzG;;AAEA;EACE,0CAA0C,EAAE,wEAAwE;AACtH;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;EACnB,oCAAoC;EACpC,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,wBAAwB;AAC1B;;AAEA;EACE,sCAAsC;AACxC;AACA;EACE,sCAAsC;AACxC;AACA;EACE,sCAAsC;AACxC;AACA;EACE,sCAAsC;AACxC;;AAEA;EACE,yBAAyB;EACzB,sCAAsC;AACxC;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,WAAW;EACX,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB;AACA;EACE,eAAe;AACjB",sourcesContent:['html {\n  user-select: none;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-container {\n  display: flex;\n  gap: 20px;\n  justify-content: start;\n  align-items: start;\n}\n\n.container-one,\n.container-two,\n.container-three {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n.p-game-board,\n.c-game-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n.d-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n}\n\n.cell {\n  position: relative;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.cell:hover {\n  z-index: 99;\n  transform: scale(1.2);\n  border-width: 2px;\n  /* background-color: rgb(172, 234, 172); */\n\n  cursor: pointer;\n}\n\n.cell.over {\n  background-color: #a9ffa9;\n}\n\n.cell.over--invalid {\n  background-color: #ffd0cb;\n}\n\n.copy-cursor {\n  cursor: copy !important;\n}\n\n.cell--ship {\n  background-color: #a9a9ff;\n}\n\n.cell--unavailable {\n  background-color: #d8d8d8;\n}\n\n.cell--undiscovered {\n  background-color: rgba(255, 255, 255, 0.851) !important;\n}\n\n.cell--miss {\n  background-color: #fafad2;\n  position: relative;\n}\n\n.cell--miss::after {\n  content: ""; /* Required for the pseudo-element to be generated */\n  position: absolute;\n  width: 5px; /* Size of the dot */\n  height: 5px; /* Size of the dot */\n  background-color: black; /* Color of the dot */\n  top: 50%; /* Center vertically */\n  left: 50%; /* Center horizontally */\n  border-radius: 50%; /* Makes the shape a circle */\n  transform: translate(-50%, -50%); /* Offset the dot to truly center it */\n}\n\n.cell--hit {\n  position: relative;\n  background-color: #fafad2;\n  border-color: #ff0000;\n  border-width: 1.5px;\n}\n\n.cell--hit::before,\n.cell--hit::after {\n  content: "";\n  position: absolute;\n  width: 2px; /* Width of the "X" lines */\n  height: 150%; /* Adjusted to fit the square */\n  top: -25%; /* Adjusted for better centering */\n  left: 50%; /* Center horizontally */\n  background-color: red; /* Color of the "X" */\n  transform: translateX(-50%); /* Center the line\'s width */\n}\n\n.cell--hit::before {\n  transform: translateX(-50%) rotate(45deg); /* Center and rotate one line to form one slash of the "X" */\n}\n\n.cell--hit::after {\n  transform: translateX(-50%) rotate(-45deg); /* Center and rotate the other line to form the other slash of the "X" */\n}\n\n.next-piece-box {\n  height: 150px;\n  width: 150px;\n  border: 2px solid black;\n  border-radius: 10px;\n  background-color: rgb(238, 238, 238);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.ship-draggable {\n  display: grid;\n  grid-template-rows: 30px;\n}\n\n.ship-draggable.ship-draggable--size-4 {\n  grid-template-columns: repeat(4, 30px);\n}\n.ship-draggable.ship-draggable--size-3 {\n  grid-template-columns: repeat(3, 30px);\n}\n.ship-draggable.ship-draggable--size-2 {\n  grid-template-columns: repeat(2, 30px);\n}\n.ship-draggable.ship-draggable--size-1 {\n  grid-template-columns: repeat(1, 30px);\n}\n\n.ship-cell-drag {\n  background-color: #a9a9ff;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.d--game-over-screen {\n  background-color: #a9ffa9;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 30px;\n}\n\nh2 {\n  font-size: 20px;\n}\nh3 {\n  font-size: 30px;\n}\nh4 {\n  font-size: 20px;\n}\n\n'],sourceRoot:""}]);const l=i},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var l=0;l<this.length;l++){var A=this[l][0];null!=A&&(i[A]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),n.push(c))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],l=0;l<e.length;l++){var A=e[l],s=r.base?A[0]+r.base:A[0],c=a[s]||0,d="".concat(s," ").concat(c);a[s]=c+1;var p=t(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=o(u,r);r.byIndex=l,n.splice(l,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var l=t(a[i]);n[l].references--}for(var A=r(e,o),s=0;s<a.length;s++){var c=t(a[s]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}a=A}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(72),n=t.n(e),r=t(825),o=t.n(r),a=t(659),i=t.n(a),l=t(56),A=t.n(l),s=t(540),c=t.n(s),d=t(113),p=t.n(d),u=t(430),h={};h.styleTagTransform=p(),h.setAttributes=A(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=c(),n()(u.A,h),u.A&&u.A.locals&&u.A.locals;var C=t(208),f={};f.styleTagTransform=p(),f.setAttributes=A(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=c(),n()(C.A,f),C.A&&C.A.locals&&C.A.locals;const g=e=>{let n=0;return{hit:()=>{n+=1},isSunk:()=>n>=e,getSize:()=>e}},m=()=>{const e=[g(4),g(3),g(3),g(2),g(2),g(2),g(1),g(1),g(1),g(1)];let n=0,t=Array.from({length:10},(()=>Array.from({length:10},(()=>({type:"empty",ship:null,hitStatus:"undiscovered"})))));const r=(e,n,r)=>{let o=!0,a=n[0],i=n[1];for(let n=0;n<e;n++){if(a>9||i>9)return!1;const e=t[i][a];if(!e||"empty"!==e.type){o=!1;break}r?a+=1:i+=1}return o};return{getGrid:()=>t,placeShip:(o=e[n],a,i)=>{if(o){let e=r(o.getSize(),a,i);if(e){n++;const e=((e,n,r)=>{const o=[];let a=n[0],i=n[1];for(let n=0;n<e;n++)o.push(t[i][a]),r?a+=1:i+=1;return o})(o.getSize(),a,i);e.forEach((e=>{e.type="ship",e.ship=o}));const r=((e,n,r)=>{const o=[],a=[0,1,1,1,0,-1,-1,-1],i=[-1,-1,0,1,1,1,0,-1];let l=n[0],A=n[1];for(let n=0;n<e;n++){for(let e=0;e<8;e++){const n=l+a[e],r=A+i[e];n>-1&&n<10&&r>-1&&r<10&&"empty"===t[r][n].type&&!o.includes(t[r][n])&&o.push(t[r][n])}r?l+=1:A+=1}return o})(o.getSize(),a,i);r.forEach((e=>e.type="unavailable"))}return e}return!1},fireShot:e=>{const n=e[0],r=e[1];return"undiscovered"===t[r][n].hitStatus&&("empty"===t[r][n].type||"unavailable"===t[r][n].type?(t[r][n].hitStatus="missed","miss"):"ship"===t[r][n].type?(t[r][n].hitStatus="hit",t[r][n].ship.hit(),"hit"):void 0)},allShipsSunk:()=>e.every((e=>e.isSunk())),resetGrid:()=>{t=Array.from({length:10},(()=>Array.from({length:10},(()=>({type:"empty",ship:null,hitStatus:"undiscovered"}))))),n=0},allShipsPlaced:()=>n>8,isValidSpot:r}},b=()=>{const e=e=>{const n=e.gameBoard.getGrid().flat(),t=e.attack?document.querySelector(".c-game-board"):document.querySelector(".p-game-board");t.innerHTML="",n.forEach((n=>{const r=document.createElement("div");r.className=e.attack?"cell cell--undiscovered":"cell","ship"===n.type?r.classList.add("cell--ship"):"unavailable"===n.type&&r.classList.add("cell--unavailable"),t.appendChild(r)}))},n=[1,1,1,1,2,2,2,3,3],t=r=>{const o=document.querySelector(".p-game-board"),a=document.querySelector(".ship-draggable"),i=o.querySelectorAll(".cell"),l=[-1,-1];a.addEventListener("dragstart",(function(e){this.style.opacity="0.3",e.dataTransfer.setDragImage(a,15,15)}),{once:!0}),a.addEventListener("dragend",(function(o){this.style.opacity="1",r.gameBoard.placeShip(void 0,l,!0)?(console.log(l),e(r),(e=>{const n=document.querySelector(".ship-draggable");n.innerHTML="";for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("ship-cell-drag"),n.appendChild(e)}n.className=`ship-draggable ship-draggable--size-${e}`,n.dataset.shipSize=`${e}`})(n.pop())):console.log(l),t(r)}),{once:!0}),i.forEach(((e,n)=>{e.addEventListener("dragleave",(()=>{console.log("Working"),e.classList.remove("over"),e.classList.remove("over--invalid")})),e.addEventListener("dragenter",(()=>{l[0]=n%10,l[1]=Math.floor(n/10%10),e.classList.add(r.gameBoard.isValidSpot(a.dataset.shipSize,l,!0)?"over":"over--invalid")}))}))};return{drawGrid:e,returnClickedCellCoords:async e=>new Promise(((n,t)=>{(e.attack?document.querySelector(".c-game-board"):document.querySelector(".p-game-board")).querySelectorAll(".cell").forEach(((e,t)=>{e.addEventListener("click",(e=>{const r=t%10,o=Math.floor(t/10%10);n([[r,o],t])}),{once:!0})}))})),playerShot:(e,n)=>{const t=(e.attack?document.querySelector(".c-game-board"):document.querySelector(".p-game-board")).querySelectorAll(".cell")[n];t.classList.contains("cell--ship")?t.className="cell cell--hit":(t.classList.contains("cell--unavailable")||"cell cell--undiscovered"===t.className||"cell"===t.className)&&(t.className="cell cell--miss")},displayGameOverScreen:e=>{const n=document.querySelector(".d--game-over-screen");n.querySelector("span").textContent=e.attack?"COMPUTER":"YOU",n.classList.remove("hidden")},clickedReadyShips:async e=>{const n=document.querySelector("#ready-ships-btn");return new Promise(((t,r)=>{n.addEventListener("click",(()=>{e.gameBoard.allShipsPlaced()&&t()}))}))},greyOutShipButtons:()=>{document.querySelector(".ship-btns").querySelectorAll("button").forEach((e=>{e.disabled=!0}))},handleDrags:t,unGreyShipButtons:()=>{document.querySelector(".ship-btns").querySelectorAll("button").forEach((e=>{e.disabled=!1}))}}},E=async()=>{const e=b(),n={gameBoard:m()},t={gameBoard:m(),attack:()=>{const e=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());return[[e,n],10*n+e]}};let r=n;const o=()=>r===n?t:n;e.unGreyShipButtons(),e.drawGrid(n),e.drawGrid(t),e.handleDrags(n);const a=n=>{n.gameBoard.resetGrid();for(let e=0;e<10;e++)for(;;){const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());if(n.gameBoard.placeShip(void 0,[e,t],e%2==0))break}e.drawGrid(n)};document.querySelector("#reset-ships-btn").addEventListener("click",(()=>{n.gameBoard.resetGrid(),e.drawGrid(n)})),document.querySelector("#randomize-ships-btn").addEventListener("click",(()=>{a(n)})),await e.clickedReadyShips(n),e.greyOutShipButtons(),t.gameBoard.resetGrid(),a(t);let i=!0;const l=async()=>{const n=r.attack?r.attack():await e.returnClickedCellCoords(o()),t=o().gameBoard.fireShot(n[0]);return"hit"===t?(e.playerShot(o(),n[1]),!o().gameBoard.allShipsSunk()&&l()):"miss"===t?(e.playerShot(o(),n[1]),!0):l()};for(;i;)i=await l(),i&&(r=o());e.displayGameOverScreen(r)};E();const y=document.querySelector(".d--game-over-screen");y.querySelector("button").addEventListener("click",(()=>{y.classList.add("hidden"),E()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoid0ZBR0lBLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksb29DQStDckMsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkJBQTZCLE1BQVEsR0FBRyxTQUFXLHdRQUF3USxlQUFpQixDQUFDLHFvQ0FBcW9DLFdBQWEsTUFFOS9DLFMsZ0VDbkRJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDBuSEFxTHRDLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLDZCQUE2QixNQUFRLEdBQUcsU0FBVyxpa0RBQWlrRCxlQUFpQixDQUFDLDJuSEFBc29ILFdBQWEsTUFFdnpLLFMsVUN0TEFELEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQTRFWCxPQXpFQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVSxHQUNWQyxPQUErQixJQUFaRixFQUFLLEdBb0I1QixPQW5CSUEsRUFBSyxLQUNQQyxHQUFXLGNBQWNFLE9BQU9ILEVBQUssR0FBSSxRQUV2Q0EsRUFBSyxLQUNQQyxHQUFXLFVBQVVFLE9BQU9ILEVBQUssR0FBSSxPQUVuQ0UsSUFDRkQsR0FBVyxTQUFTRSxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxPQUU1RUMsR0FBV04sRUFBdUJLLEdBQzlCRSxJQUNGRCxHQUFXLEtBRVRELEVBQUssS0FDUEMsR0FBVyxLQUVURCxFQUFLLEtBQ1BDLEdBQVcsS0FFTkEsQ0FDVCxJQUFHSSxLQUFLLEdBQ1YsRUFHQVQsRUFBS1UsRUFBSSxTQUFXQyxFQUFTQyxFQUFPQyxFQUFRQyxFQUFVQyxHQUM3QixpQkFBWkosSUFDVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsT0FBU0ssS0FFN0IsSUFBSUMsRUFBeUIsQ0FBQyxFQUM5QixHQUFJSixFQUNGLElBQUssSUFBSUssRUFBSSxFQUFHQSxFQUFJaEIsS0FBS00sT0FBUVUsSUFBSyxDQUNwQyxJQUFJckIsRUFBS0ssS0FBS2dCLEdBQUcsR0FDUCxNQUFOckIsSUFDRm9CLEVBQXVCcEIsSUFBTSxFQUVqQyxDQUVGLElBQUssSUFBSXNCLEVBQUssRUFBR0EsRUFBS1IsRUFBUUgsT0FBUVcsSUFBTSxDQUMxQyxJQUFJZixFQUFPLEdBQUdHLE9BQU9JLEVBQVFRLElBQ3pCTixHQUFVSSxFQUF1QmIsRUFBSyxXQUdyQixJQUFWVyxTQUNjLElBQVpYLEVBQUssS0FHZEEsRUFBSyxHQUFLLFNBQVNHLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxNQUYvRkEsRUFBSyxHQUFLVyxHQU1WSCxJQUNHUixFQUFLLElBR1JBLEVBQUssR0FBSyxVQUFVRyxPQUFPSCxFQUFLLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLEtBQzFEQSxFQUFLLEdBQUtRLEdBSFZSLEVBQUssR0FBS1EsR0FNVkUsSUFDR1YsRUFBSyxJQUdSQSxFQUFLLEdBQUssY0FBY0csT0FBT0gsRUFBSyxHQUFJLE9BQU9HLE9BQU9ILEVBQUssR0FBSSxLQUMvREEsRUFBSyxHQUFLVSxHQUhWVixFQUFLLEdBQUssR0FBR0csT0FBT08sSUFNeEJkLEVBQUtMLEtBQUtTLEdBQ1osQ0FDRixFQUNPSixDQUNULEMsVUNsRkFKLEVBQU9FLFFBQVUsU0FBVU0sR0FDekIsSUFBSUMsRUFBVUQsRUFBSyxHQUNmZ0IsRUFBYWhCLEVBQUssR0FDdEIsSUFBS2dCLEVBQ0gsT0FBT2YsRUFFVCxHQUFvQixtQkFBVGdCLEtBQXFCLENBQzlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEcEIsT0FBT2UsR0FDN0VNLEVBQWdCLE9BQU9yQixPQUFPb0IsRUFBTSxPQUN4QyxNQUFPLENBQUN0QixHQUFTRSxPQUFPLENBQUNxQixJQUFnQm5CLEtBQUssS0FDaEQsQ0FDQSxNQUFPLENBQUNKLEdBQVNJLEtBQUssS0FDeEIsQyxTQ2JBLElBQUlvQixFQUFjLEdBQ2xCLFNBQVNDLEVBQXFCQyxHQUU1QixJQURBLElBQUlDLEdBQVUsRUFDTHRCLEVBQUksRUFBR0EsRUFBSW1CLEVBQVlyQixPQUFRRSxJQUN0QyxHQUFJbUIsRUFBWW5CLEdBQUdxQixhQUFlQSxFQUFZLENBQzVDQyxFQUFTdEIsRUFDVCxLQUNGLENBRUYsT0FBT3NCLENBQ1QsQ0FDQSxTQUFTQyxFQUFhakMsRUFBTWtDLEdBRzFCLElBRkEsSUFBSUMsRUFBYSxDQUFDLEVBQ2RDLEVBQWMsR0FDVDFCLEVBQUksRUFBR0EsRUFBSVYsRUFBS1EsT0FBUUUsSUFBSyxDQUNwQyxJQUFJTixFQUFPSixFQUFLVSxHQUNaYixFQUFLcUMsRUFBUUcsS0FBT2pDLEVBQUssR0FBSzhCLEVBQVFHLEtBQU9qQyxFQUFLLEdBQ2xEa0MsRUFBUUgsRUFBV3RDLElBQU8sRUFDMUJrQyxFQUFhLEdBQUd4QixPQUFPVixFQUFJLEtBQUtVLE9BQU8rQixHQUMzQ0gsRUFBV3RDLEdBQU15QyxFQUFRLEVBQ3pCLElBQUlDLEVBQW9CVCxFQUFxQkMsR0FDekNTLEVBQU0sQ0FDUkMsSUFBS3JDLEVBQUssR0FDVlEsTUFBT1IsRUFBSyxHQUNac0MsVUFBV3RDLEVBQUssR0FDaEJVLFNBQVVWLEVBQUssR0FDZlcsTUFBT1gsRUFBSyxJQUVkLElBQTJCLElBQXZCbUMsRUFDRlYsRUFBWVUsR0FBbUJJLGFBQy9CZCxFQUFZVSxHQUFtQkssUUFBUUosT0FDbEMsQ0FDTCxJQUFJSSxFQUFVQyxFQUFnQkwsRUFBS04sR0FDbkNBLEVBQVFZLFFBQVVwQyxFQUNsQm1CLEVBQVlrQixPQUFPckMsRUFBRyxFQUFHLENBQ3ZCcUIsV0FBWUEsRUFDWmEsUUFBU0EsRUFDVEQsV0FBWSxHQUVoQixDQUNBUCxFQUFZekMsS0FBS29DLEVBQ25CLENBQ0EsT0FBT0ssQ0FDVCxDQUNBLFNBQVNTLEVBQWdCTCxFQUFLTixHQUM1QixJQUFJYyxFQUFNZCxFQUFRZSxPQUFPZixHQVl6QixPQVhBYyxFQUFJRSxPQUFPVixHQUNHLFNBQWlCVyxHQUM3QixHQUFJQSxFQUFRLENBQ1YsR0FBSUEsRUFBT1YsTUFBUUQsRUFBSUMsS0FBT1UsRUFBT3ZDLFFBQVU0QixFQUFJNUIsT0FBU3VDLEVBQU9ULFlBQWNGLEVBQUlFLFdBQWFTLEVBQU9yQyxXQUFhMEIsRUFBSTFCLFVBQVlxQyxFQUFPcEMsUUFBVXlCLEVBQUl6QixNQUN6SixPQUVGaUMsRUFBSUUsT0FBT1YsRUFBTVcsRUFDbkIsTUFDRUgsRUFBSUksUUFFUixDQUVGLENBQ0F4RCxFQUFPRSxRQUFVLFNBQVVFLEVBQU1rQyxHQUcvQixJQUFJbUIsRUFBa0JwQixFQUR0QmpDLEVBQU9BLEdBQVEsR0FEZmtDLEVBQVVBLEdBQVcsQ0FBQyxHQUd0QixPQUFPLFNBQWdCb0IsR0FDckJBLEVBQVVBLEdBQVcsR0FDckIsSUFBSyxJQUFJNUMsRUFBSSxFQUFHQSxFQUFJMkMsRUFBZ0I3QyxPQUFRRSxJQUFLLENBQy9DLElBQ0k2QyxFQUFRekIsRUFES3VCLEVBQWdCM0MsSUFFakNtQixFQUFZMEIsR0FBT1osWUFDckIsQ0FFQSxJQURBLElBQUlhLEVBQXFCdkIsRUFBYXFCLEVBQVNwQixHQUN0Q3VCLEVBQUssRUFBR0EsRUFBS0osRUFBZ0I3QyxPQUFRaUQsSUFBTSxDQUNsRCxJQUNJQyxFQUFTNUIsRUFES3VCLEVBQWdCSSxJQUVLLElBQW5DNUIsRUFBWTZCLEdBQVFmLGFBQ3RCZCxFQUFZNkIsR0FBUWQsVUFDcEJmLEVBQVlrQixPQUFPVyxFQUFRLEdBRS9CLENBQ0FMLEVBQWtCRyxDQUNwQixDQUNGLEMsVUNqRkEsSUFBSUcsRUFBTyxDQUFDLEVBK0JaL0QsRUFBT0UsUUFQUCxTQUEwQjhELEVBQVFDLEdBQ2hDLElBQUlDLEVBdEJOLFNBQW1CQSxHQUNqQixRQUE0QixJQUFqQkgsRUFBS0csR0FBeUIsQ0FDdkMsSUFBSUMsRUFBY0MsU0FBU0MsY0FBY0gsR0FHekMsR0FBSUksT0FBT0MsbUJBQXFCSixhQUF1QkcsT0FBT0Msa0JBQzVELElBR0VKLEVBQWNBLEVBQVlLLGdCQUFnQkMsSUFDNUMsQ0FBRSxNQUFPQyxHQUVQUCxFQUFjLElBQ2hCLENBRUZKLEVBQUtHLEdBQVVDLENBQ2pCLENBQ0EsT0FBT0osRUFBS0csRUFDZCxDQUllUyxDQUFVWCxHQUN2QixJQUFLRSxFQUNILE1BQU0sSUFBSVUsTUFBTSwyR0FFbEJWLEVBQU9XLFlBQVlaLEVBQ3JCLEMsVUN2QkFqRSxFQUFPRSxRQU5QLFNBQTRCb0MsR0FDMUIsSUFBSXdDLEVBQVVWLFNBQVNXLGNBQWMsU0FHckMsT0FGQXpDLEVBQVEwQyxjQUFjRixFQUFTeEMsRUFBUTJDLFlBQ3ZDM0MsRUFBUTBCLE9BQU9jLEVBQVN4QyxFQUFRQSxTQUN6QndDLENBQ1QsQyxlQ0NBOUUsRUFBT0UsUUFOUCxTQUF3Q2dGLEdBQ3RDLElBQUlDLEVBQW1ELEtBQ25EQSxHQUNGRCxFQUFhRSxhQUFhLFFBQVNELEVBRXZDLEMsVUNvREFuRixFQUFPRSxRQWpCUCxTQUFnQm9DLEdBQ2QsR0FBd0Isb0JBQWI4QixTQUNULE1BQU8sQ0FDTGQsT0FBUSxXQUFtQixFQUMzQkUsT0FBUSxXQUFtQixHQUcvQixJQUFJMEIsRUFBZTVDLEVBQVErQyxtQkFBbUIvQyxHQUM5QyxNQUFPLENBQ0xnQixPQUFRLFNBQWdCVixJQWpENUIsU0FBZXNDLEVBQWM1QyxFQUFTTSxHQUNwQyxJQUFJQyxFQUFNLEdBQ05ELEVBQUkxQixXQUNOMkIsR0FBTyxjQUFjbEMsT0FBT2lDLEVBQUkxQixTQUFVLFFBRXhDMEIsRUFBSTVCLFFBQ042QixHQUFPLFVBQVVsQyxPQUFPaUMsRUFBSTVCLE1BQU8sT0FFckMsSUFBSU4sT0FBaUMsSUFBZGtDLEVBQUl6QixNQUN2QlQsSUFDRm1DLEdBQU8sU0FBU2xDLE9BQU9pQyxFQUFJekIsTUFBTVAsT0FBUyxFQUFJLElBQUlELE9BQU9pQyxFQUFJekIsT0FBUyxHQUFJLE9BRTVFMEIsR0FBT0QsRUFBSUMsSUFDUG5DLElBQ0ZtQyxHQUFPLEtBRUxELEVBQUk1QixRQUNONkIsR0FBTyxLQUVMRCxFQUFJMUIsV0FDTjJCLEdBQU8sS0FFVCxJQUFJQyxFQUFZRixFQUFJRSxVQUNoQkEsR0FBNkIsb0JBQVRyQixPQUN0Qm9CLEdBQU8sdURBQXVEbEMsT0FBT2MsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVZ0IsTUFBZSxRQUt0SVIsRUFBUWdELGtCQUFrQnpDLEVBQUtxQyxFQUFjNUMsRUFBUUEsUUFDdkQsQ0FvQk1pRCxDQUFNTCxFQUFjNUMsRUFBU00sRUFDL0IsRUFDQVksT0FBUSxZQXJCWixTQUE0QjBCLEdBRTFCLEdBQWdDLE9BQTVCQSxFQUFhTSxXQUNmLE9BQU8sRUFFVE4sRUFBYU0sV0FBV0MsWUFBWVAsRUFDdEMsQ0FnQk1RLENBQW1CUixFQUNyQixFQUVKLEMsVUM5Q0FsRixFQUFPRSxRQVZQLFNBQTJCMkMsRUFBS3FDLEdBQzlCLEdBQUlBLEVBQWFTLFdBQ2ZULEVBQWFTLFdBQVdDLFFBQVUvQyxNQUM3QixDQUNMLEtBQU9xQyxFQUFhVyxZQUNsQlgsRUFBYU8sWUFBWVAsRUFBYVcsWUFFeENYLEVBQWFMLFlBQVlULFNBQVMwQixlQUFlakQsR0FDbkQsQ0FDRixDLEdDWElrRCxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUI3RSxJQUFqQjhFLEVBQ0gsT0FBT0EsRUFBYWhHLFFBR3JCLElBQUlGLEVBQVMrRixFQUF5QkUsR0FBWSxDQUNqRGhHLEdBQUlnRyxFQUVKL0YsUUFBUyxDQUFDLEdBT1gsT0FIQWlHLEVBQW9CRixHQUFVakcsRUFBUUEsRUFBT0UsUUFBUzhGLEdBRy9DaEcsRUFBT0UsT0FDZixDQ3JCQThGLEVBQW9CSSxFQUFLcEcsSUFDeEIsSUFBSXFHLEVBQVNyRyxHQUFVQSxFQUFPc0csV0FDN0IsSUFBT3RHLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBZ0csRUFBb0JPLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLENBQU0sRUNMZEwsRUFBb0JPLEVBQUksQ0FBQ3JHLEVBQVN1RyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hULEVBQW9CVyxFQUFFRixFQUFZQyxLQUFTVixFQUFvQlcsRUFBRXpHLEVBQVN3RyxJQUM1RUUsT0FBT0MsZUFBZTNHLEVBQVN3RyxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsSUFFMUUsRUNORFYsRUFBb0JXLEVBQUksQ0FBQy9ELEVBQUtvRSxJQUFVSixPQUFPSyxVQUFVQyxlQUFlQyxLQUFLdkUsRUFBS29FLEdDQWxGaEIsRUFBb0JvQixRQUFLaEcsRSw2SENXckJrQixFQUFVLENBQUMsRUFFZkEsRUFBUWdELGtCQUFvQixJQUM1QmhELEVBQVEwQyxjQUFnQixJQUVsQjFDLEVBQVEwQixPQUFTLFNBQWMsS0FBTSxRQUUzQzFCLEVBQVFlLE9BQVMsSUFDakJmLEVBQVErQyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTL0MsR0FLSixLQUFXLElBQVErRSxRQUFTLElBQVFBLE8sYUNmdEQsRUFBVSxDQUFDLEVBRWYsRUFBUS9CLGtCQUFvQixJQUM1QixFQUFRTixjQUFnQixJQUVsQixFQUFRaEIsT0FBUyxTQUFjLEtBQU0sUUFFM0MsRUFBUVgsT0FBUyxJQUNqQixFQUFRZ0MsbUJBQXFCLElBRWhCLElBQUksSUFBUyxHQUtKLEtBQVcsSUFBUWdDLFFBQVMsSUFBUUEsT0FBbkQsTUN4QkRDLEVBQWNDLElBQ2xCLElBQUlDLEVBQU8sRUFXWCxNQUFPLENBQ0xDLElBWFUsS0FDVkQsR0FBUSxDQUFDLEVBV1RFLE9BVGEsSUFDTkYsR0FBUUQsRUFTZkksUUFOYyxJQUNQSixFQU1SLEVDQUdLLEVBQWtCLEtBQ3RCLE1BQU1DLEVBQVEsQ0FDWlAsRUFBVyxHQUNYQSxFQUFXLEdBQ1hBLEVBQVcsR0FDWEEsRUFBVyxHQUNYQSxFQUFXLEdBQ1hBLEVBQVcsR0FDWEEsRUFBVyxHQUNYQSxFQUFXLEdBQ1hBLEVBQVcsR0FDWEEsRUFBVyxJQUViLElBQUlRLEVBQW1CLEVBRW5CQyxFQUFPQyxNQUFNQyxLQUFLLENBQUVySCxPQUFRLEtBQU0sSUFDcENvSCxNQUFNQyxLQUFLLENBQUVySCxPQUFRLEtBQU0sS0FuQnRCLENBQUVzSCxLQVJFLFFBUUlDLEtBTkosS0FNVUMsVUFETCxxQkFzQmhCLE1BSU1DLEVBQWMsQ0FBQ0MsRUFBU0MsRUFBUUMsS0FDcEMsSUFBSUMsR0FBUSxFQUNSQyxFQUFJSCxFQUFPLEdBQ1hJLEVBQUlKLEVBQU8sR0FFZixJQUFLLElBQUl6SCxFQUFJLEVBQUdBLEVBQUl3SCxFQUFTeEgsSUFBSyxDQUNoQyxHQUFJNEgsRUFBSSxHQUFLQyxFQUFJLEVBQUcsT0FBTyxFQUUzQixNQUFNQyxFQUFjYixFQUFLWSxHQUFHRCxHQUM1QixJQUFLRSxHQUFvQyxVQUFyQkEsRUFBWVYsS0FBa0IsQ0FDaERPLEdBQVEsRUFDUixLQUNGLENBQ0lELEVBQVlFLEdBQUssRUFDaEJDLEdBQUssQ0FDWixDQUVBLE9BQU9GLENBQUssRUE4RmQsTUFBTyxDQUNMSSxRQXBIYyxJQUNQZCxFQW9IUGUsVUF0RGdCLENBQUNYLEVBQU9OLEVBQU1DLEdBQW1CUyxFQUFRQyxLQUN6RCxHQUFJTCxFQUFNLENBQ1IsSUFBSVksRUFBYVYsRUFBWUYsRUFBS1IsVUFBV1ksRUFBUUMsR0FFckQsR0FBSU8sRUFBWSxDQUNkakIsSUFDQSxNQUFNa0IsRUE3Q2EsRUFBQ1YsRUFBU0MsRUFBUUMsS0FDekMsTUFBTVMsRUFBWSxHQUNsQixJQUFJUCxFQUFJSCxFQUFPLEdBQ1hJLEVBQUlKLEVBQU8sR0FDZixJQUFLLElBQUl6SCxFQUFJLEVBQUdBLEVBQUl3SCxFQUFTeEgsSUFDM0JtSSxFQUFVbEosS0FBS2dJLEVBQUtZLEdBQUdELElBQ25CRixFQUFZRSxHQUFLLEVBQ2hCQyxHQUFLLEVBR1osT0FBT00sQ0FBUyxFQW1DTUMsQ0FBaUJmLEVBQUtSLFVBQVdZLEVBQVFDLEdBQzNEUSxFQUFVRyxTQUFTQyxJQUNqQkEsRUFBS2xCLEtBQU8sT0FDWmtCLEVBQUtqQixLQUFPQSxDQUFJLElBR2xCLE1BQU1rQixFQXRDb0IsRUFBQ2YsRUFBU0MsRUFBUUMsS0FDaEQsTUFBTVMsRUFBWSxHQUNaSyxFQUFLLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUM5QkMsRUFBSyxFQUFFLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksR0FDcEMsSUFBSUMsRUFBUWpCLEVBQU8sR0FDZmtCLEVBQVFsQixFQUFPLEdBQ25CLElBQUssSUFBSXpILEVBQUksRUFBR0EsRUFBSXdILEVBQVN4SCxJQUFLLENBQ2hDLElBQUssSUFBSTRJLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxJQUFLLENBQzFCLE1BQU1oQixFQUFJYyxFQUFRRixFQUFHSSxHQUNmZixFQUFJYyxFQUFRRixFQUFHRyxHQUVuQmhCLEdBQUssR0FDTEEsRUFBSSxJQUNKQyxHQUFLLEdBQ0xBLEVBQUksSUFDZ0IsVUFBcEJaLEVBQUtZLEdBQUdELEdBQUdSLE9BQ1ZlLEVBQVVVLFNBQVM1QixFQUFLWSxHQUFHRCxLQUU1Qk8sRUFBVWxKLEtBQUtnSSxFQUFLWSxHQUFHRCxHQUMzQixDQUNJRixFQUFZZ0IsR0FBUyxFQUNwQkMsR0FBUyxDQUNoQixDQUVBLE9BQU9SLENBQVMsRUFjYVcsQ0FDdkJ6QixFQUFLUixVQUNMWSxFQUNBQyxHQUVGYSxFQUFpQkYsU0FBU0MsR0FBVUEsRUFBS2xCLEtBQU8sZUFDbEQsQ0FFQSxPQUFPYSxDQUNULENBQ0EsT0FBTyxDQUFLLEVBaUNaYyxTQS9CZ0J0QixJQUNoQixNQUFNRyxFQUFJSCxFQUFPLEdBQ1hJLEVBQUlKLEVBQU8sR0FDakIsTUFBNkIsaUJBQXpCUixFQUFLWSxHQUFHRCxHQUFHTixZQUNjLFVBQXBCTCxFQUFLWSxHQUFHRCxHQUFHUixNQUF3QyxnQkFBcEJILEVBQUtZLEdBQUdELEdBQUdSLE1BQ2pESCxFQUFLWSxHQUFHRCxHQUFHTixVQUFZLFNBQ2hCLFFBQ3NCLFNBQXBCTCxFQUFLWSxHQUFHRCxHQUFHUixNQUNwQkgsRUFBS1ksR0FBR0QsR0FBR04sVUFBWSxNQUN2QkwsRUFBS1ksR0FBR0QsR0FBR1AsS0FBS1YsTUFDVCxZQUhGLEVBSVAsRUFxQkFxQyxhQW5CbUIsSUFDWmpDLEVBQU1rQyxPQUFPNUIsR0FBU0EsRUFBS1QsV0FtQmxDc0MsVUFoQmdCLEtBQ2hCakMsRUFBT0MsTUFBTUMsS0FBSyxDQUFFckgsT0FBUSxLQUFNLElBQ2hDb0gsTUFBTUMsS0FBSyxDQUFFckgsT0FBUSxLQUFNLEtBL0h4QixDQUFFc0gsS0FSRSxRQVFJQyxLQU5KLEtBTVVDLFVBREwscUJBbUlkTixFQUFtQixDQUFDLEVBWXBCbUMsZUFUcUIsSUFDZG5DLEVBQW1CLEVBUzFCTyxjQUNELEVDL0pHNkIsRUFBaUIsS0FDckIsTUFBTUMsRUFBWUMsSUFJaEIsTUFBTXJDLEVBQU9xQyxFQUFPQyxVQUFVeEIsVUFBVXlCLE9BQ2xDQyxFQUFlSCxFQUFPSSxPQUN4QnBHLFNBQVNDLGNBQWMsaUJBQ3ZCRCxTQUFTQyxjQUFjLGlCQUUzQmtHLEVBQWFFLFVBQVksR0FFekIxQyxFQUFLb0IsU0FBU3VCLElBQ1osTUFBTUMsRUFBVXZHLFNBQVNXLGNBQWMsT0FDdkM0RixFQUFRQyxVQUFZUixFQUFPSSxPQUFTLDBCQUE0QixPQUM5QyxTQUFkRSxFQUFLeEMsS0FDUHlDLEVBQVFFLFVBQVVDLElBQUksY0FDQyxnQkFBZEosRUFBS3hDLE1BQ2R5QyxFQUFRRSxVQUFVQyxJQUFJLHFCQUd4QlAsRUFBYTFGLFlBQVk4RixFQUFRLEdBQ2pDLEVBZ0dFSSxFQUFhLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ3RDQyxFQUFlWixJQUNuQixNQUFNRyxFQUFlbkcsU0FBU0MsY0FBYyxpQkFDdEM0RyxFQUFZN0csU0FBU0MsY0FBYyxtQkFDbkM2RyxFQUFRWCxFQUFhWSxpQkFBaUIsU0FDdENDLEVBQW9CLEVBQUUsR0FBSSxHQXdCaENILEVBQVVJLGlCQUFpQixhQXRCM0IsU0FBeUJDLEdBQ3ZCaEwsS0FBSzJELE1BQU1zSCxRQUFVLE1BR3JCRCxFQUFNRSxhQUFhQyxhQUFhUixFQUFXLEdBQUksR0FDakQsR0FpQnlELENBQUVTLE1BQU0sSUFDakVULEVBQVVJLGlCQUFpQixXQWhCM0IsU0FBdUIzRyxHQUNyQnBFLEtBQUsyRCxNQUFNc0gsUUFBVSxJQUVqQm5CLEVBQU9DLFVBQVV2QixlQUFVMUgsRUFBV2dLLEdBQW1CLElBQzNETyxRQUFRQyxJQUFJUixHQUNaakIsRUFBU0MsR0FsQ1MsQ0FBQ3lCLElBQ3ZCLE1BQU1aLEVBQVk3RyxTQUFTQyxjQUFjLG1CQUV6QzRHLEVBQVVSLFVBQVksR0FDdEIsSUFBSyxJQUFJM0osRUFBSSxFQUFHQSxFQUFJK0ssRUFBYS9LLElBQUssQ0FDcEMsTUFBTWdMLEVBQWUxSCxTQUFTVyxjQUFjLE9BQzVDK0csRUFBYWpCLFVBQVVDLElBQUksa0JBQzNCRyxFQUFVcEcsWUFBWWlILEVBQ3hCLENBRUFiLEVBQVVMLFVBQVksdUNBQXVDaUIsSUFFN0RaLEVBQVVjLFFBQVFDLFNBQVcsR0FBR0gsR0FBYSxFQXdCekNJLENBQWdCbEIsRUFBV21CLFFBRTNCUCxRQUFRQyxJQUFJUixHQUdkSixFQUFZWixFQUNkLEdBR3FELENBQUVzQixNQUFNLElBRTdEUixFQUFNL0IsU0FBUSxDQUFDdUIsRUFBTTVKLEtBQ25CNEosRUFBS1csaUJBQWlCLGFBQWEsS0FDakNNLFFBQVFDLElBQUksV0FDWmxCLEVBQUtHLFVBQVVySCxPQUFPLFFBQ3RCa0gsRUFBS0csVUFBVXJILE9BQU8sZ0JBQWdCLElBRXhDa0gsRUFBS1csaUJBQWlCLGFBQWEsS0FDakNELEVBQWtCLEdBQUt0SyxFQUFJLEdBQzNCc0ssRUFBa0IsR0FBS2UsS0FBS0MsTUFBT3RMLEVBQUksR0FBTSxJQUM3QzRKLEVBQUtHLFVBQVVDLElBQ2JWLEVBQU9DLFVBQVVoQyxZQUNmNEMsRUFBVWMsUUFBUUMsU0FDbEJaLEdBQ0EsR0FFRSxPQUNBLGdCQUNMLEdBQ0QsR0FDRixFQUdKLE1BQU8sQ0FDTGpCLFdBQ0FrQyx3QkFySjhCQyxNQUFPbEMsR0FDOUIsSUFBSW1DLFNBQVEsQ0FBQ0MsRUFBU0MsTUFDVHJDLEVBQU9JLE9BQ3JCcEcsU0FBU0MsY0FBYyxpQkFDdkJELFNBQVNDLGNBQWMsa0JBRUg4RyxpQkFBaUIsU0FDbkNoQyxTQUFRLENBQUN1QixFQUFNNUosS0FDbkI0SixFQUFLVyxpQkFDSCxTQUNDQyxJQUNDLE1BQU01QyxFQUFJNUgsRUFBSSxHQUNSNkgsRUFBSXdELEtBQUtDLE1BQU90TCxFQUFJLEdBQU0sSUFDaEMwTCxFQUFRLENBQUMsQ0FBQzlELEVBQUdDLEdBQUk3SCxHQUFHLEdBRXRCLENBQUU0SyxNQUFNLEdBQ1QsR0FDRCxJQXFJSmdCLFdBaklpQixDQUFDQyxFQUFPQyxLQUN6QixNQUlNbEMsR0FKWWlDLEVBQU1uQyxPQUNwQnBHLFNBQVNDLGNBQWMsaUJBQ3ZCRCxTQUFTQyxjQUFjLGtCQUVKOEcsaUJBQWlCLFNBQVN5QixHQUU3Q2xDLEVBQUtHLFVBQVVnQyxTQUFTLGNBQzFCbkMsRUFBS0UsVUFBWSxrQkFFakJGLEVBQUtHLFVBQVVnQyxTQUFTLHNCQUNMLDRCQUFuQm5DLEVBQUtFLFdBQ2MsU0FBbkJGLEVBQUtFLGFBRUxGLEVBQUtFLFVBQVksa0JBQ25CLEVBbUhBa0Msc0JBaEg2QkMsSUFDN0IsTUFBTUMsRUFBaUI1SSxTQUFTQyxjQUFjLHdCQUM5QzJJLEVBQWUzSSxjQUFjLFFBQVE0SSxZQUFjRixFQUFPdkMsT0FDdEQsV0FDQSxNQUNKd0MsRUFBZW5DLFVBQVVySCxPQUFPLFNBQVMsRUE0R3pDMEosa0JBekd3QlosTUFBT2xDLElBQy9CLE1BQU0rQyxFQUFNL0ksU0FBU0MsY0FBYyxvQkFFbkMsT0FBTyxJQUFJa0ksU0FBUSxDQUFDQyxFQUFTQyxLQUMzQlUsRUFBSTlCLGlCQUFpQixTQUFTLEtBQ3hCakIsRUFBT0MsVUFBVUosa0JBQWtCdUMsR0FFdkMsR0FDQSxHQUNGLEVBaUdGWSxtQkE5RnlCLEtBQ1poSixTQUNWQyxjQUFjLGNBQ2Q4RyxpQkFBaUIsVUFFZmhDLFNBQVNnRSxJQUNaQSxFQUFJRSxVQUFXLENBQUksR0FDbkIsRUF3RkZyQyxjQUNBc0Msa0JBdkZ3QixLQUNYbEosU0FDVkMsY0FBYyxjQUNkOEcsaUJBQWlCLFVBRWZoQyxTQUFTZ0UsSUFDWkEsRUFBSUUsVUFBVyxDQUFLLEdBQ3BCLEVBaUZILEVDbExHRSxFQUFPakIsVUFFWCxNQUFNa0IsRUFBTXRELElBQ05FLEVDRkMsQ0FBRUMsVUFEU3pDLEtESVo2RixFQ09DLENBQUVwRCxVQU5TekMsSUFNRTRDLE9BTEwsS0FDYixNQUFNOUIsRUFBSXlELEtBQUtDLE1BQXNCLEdBQWhCRCxLQUFLdUIsVUFDcEIvRSxFQUFJd0QsS0FBS0MsTUFBc0IsR0FBaEJELEtBQUt1QixVQUMxQixNQUFPLENBQUMsQ0FBQ2hGLEVBQUdDLEdBQVEsR0FBSkEsRUFBU0QsRUFBRSxHREY3QixJQUFJaUYsRUFBZ0J2RCxFQUdwQixNQUFNd0QsRUFBYSxJQUFPRCxJQUFrQnZELEVBQVNxRCxFQUFXckQsRUFFaEVvRCxFQUFJRixvQkFJSkUsRUFBSXJELFNBQVNDLEdBQ2JvRCxFQUFJckQsU0FBU3NELEdBRWJELEVBQUl4QyxZQUFZWixHQUVoQixNQUFNeUQsRUFBa0JDLElBQ3RCQSxFQUFFekQsVUFBVUwsWUFFWixJQUFLLElBQUlsSixFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdEIsT0FBYSxDQUNYLE1BQU00SCxFQUFJeUQsS0FBS0MsTUFBc0IsR0FBaEJELEtBQUt1QixVQUNwQi9FLEVBQUl3RCxLQUFLQyxNQUFzQixHQUFoQkQsS0FBS3VCLFVBQzFCLEdBQUlJLEVBQUV6RCxVQUFVdkIsZUFBVTFILEVBQVcsQ0FBQ3NILEVBQUdDLEdBQUlELEVBQUksR0FBTSxHQUNyRCxLQUVKLENBRUY4RSxFQUFJckQsU0FBUzJELEVBQUUsRUFJSzFKLFNBQVNDLGNBQWMsb0JBQy9CZ0gsaUJBQWlCLFNBQVMsS0FDdENqQixFQUFPQyxVQUFVTCxZQUNqQndELEVBQUlyRCxTQUFTQyxFQUFPLElBR0loRyxTQUFTQyxjQUFjLHdCQUMvQmdILGlCQUFpQixTQUFTLEtBQzFDd0MsRUFBZXpELEVBQU8sVUFJbEJvRCxFQUFJTixrQkFBa0I5QyxHQUM1Qm9ELEVBQUlKLHFCQUdKSyxFQUFTcEQsVUFBVUwsWUFDbkI2RCxFQUFlSixHQUVmLElBQUlNLEdBQWUsRUFFbkIsTUFBTUMsRUFBb0IxQixVQUV4QixNQUFNMkIsRUFBYU4sRUFBY25ELE9BQzdCbUQsRUFBY25ELGVBQ1JnRCxFQUFJbkIsd0JBQXdCdUIsS0FHaENNLEVBQWVOLElBQWF2RCxVQUFVUixTQUFTb0UsRUFBVyxJQUNoRSxNQUFxQixRQUFqQkMsR0FDRlYsRUFBSWQsV0FBV2tCLElBQWNLLEVBQVcsS0FDcENMLElBQWF2RCxVQUFVUCxnQkFHcEJrRSxLQUNtQixTQUFqQkUsR0FDVFYsRUFBSWQsV0FBV2tCLElBQWNLLEVBQVcsS0FDakMsR0FFQUQsR0FDVCxFQUdGLEtBQU9ELEdBQ0xBLFFBQXFCQyxJQUNqQkQsSUFBY0osRUFBZ0JDLEtBR3BDSixFQUFJVixzQkFBc0JhLEVBQWMsRUVwRjFDSixJQUVBLE1BQU1QLEVBQWlCNUksU0FBU0MsY0FBYyx3QkFDM0IySSxFQUFlM0ksY0FBYyxVQUNyQ2dILGlCQUFpQixTQUFTLEtBQ25DMkIsRUFBZW5DLFVBQVVDLElBQUksVUFDN0J5QyxHQUFNLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvcmVzZXQuY3NzP2VkZTAiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly93ZWJwYWNrLXRlbXBsYXRlLy4vc3JjL3NoaXAuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9nYW1lQm9hcmQuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9tYW5pcHVsYXRlRE9NLmpzIiwid2VicGFjazovL3dlYnBhY2stdGVtcGxhdGUvLi9zcmMvZ2FtZUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9wYXJ0aWNpcGFudHMuanMiLCJ3ZWJwYWNrOi8vd2VicGFjay10ZW1wbGF0ZS8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC8gXG4gICB2Mi4wIHwgMjAxMTAxMjZcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXG4qL1xuXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxuYiwgdSwgaSwgY2VudGVyLFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCwgXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxubWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuXHRtYXJnaW46IDA7XG5cdHBhZGRpbmc6IDA7XG5cdGJvcmRlcjogMDtcblx0Zm9udC1zaXplOiAxMDAlO1xuXHRmb250OiBpbmhlcml0O1xuXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XG5cdGRpc3BsYXk6IGJsb2NrO1xufVxuYm9keSB7XG5cdGxpbmUtaGVpZ2h0OiAxO1xufVxub2wsIHVsIHtcblx0bGlzdC1zdHlsZTogbm9uZTtcbn1cbmJsb2NrcXVvdGUsIHEge1xuXHRxdW90ZXM6IG5vbmU7XG59XG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcblx0Y29udGVudDogJyc7XG5cdGNvbnRlbnQ6IG5vbmU7XG59XG50YWJsZSB7XG5cdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG5cdGJvcmRlci1zcGFjaW5nOiAwO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3Jlc2V0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTs7O0NBR0M7O0FBRUQ7Ozs7Ozs7Ozs7Ozs7Q0FhQyxTQUFTO0NBQ1QsVUFBVTtDQUNWLFNBQVM7Q0FDVCxlQUFlO0NBQ2YsYUFBYTtDQUNiLHdCQUF3QjtBQUN6QjtBQUNBLGdEQUFnRDtBQUNoRDs7Q0FFQyxjQUFjO0FBQ2Y7QUFDQTtDQUNDLGNBQWM7QUFDZjtBQUNBO0NBQ0MsZ0JBQWdCO0FBQ2pCO0FBQ0E7Q0FDQyxZQUFZO0FBQ2I7QUFDQTs7Q0FFQyxXQUFXO0NBQ1gsYUFBYTtBQUNkO0FBQ0E7Q0FDQyx5QkFBeUI7Q0FDekIsaUJBQWlCO0FBQ2xCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvIFxcbiAgIHYyLjAgfCAyMDExMDEyNlxcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXFxuKi9cXG5cXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxcbmEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcXG5iLCB1LCBpLCBjZW50ZXIsXFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcXG50YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCwgXFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xcblxcdG1hcmdpbjogMDtcXG5cXHRwYWRkaW5nOiAwO1xcblxcdGJvcmRlcjogMDtcXG5cXHRmb250LXNpemU6IDEwMCU7XFxuXFx0Zm9udDogaW5oZXJpdDtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XFxufVxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLCBcXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xcblxcdGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5ib2R5IHtcXG5cXHRsaW5lLWhlaWdodDogMTtcXG59XFxub2wsIHVsIHtcXG5cXHRsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5ibG9ja3F1b3RlLCBxIHtcXG5cXHRxdW90ZXM6IG5vbmU7XFxufVxcbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxcbnE6YmVmb3JlLCBxOmFmdGVyIHtcXG5cXHRjb250ZW50OiAnJztcXG5cXHRjb250ZW50OiBub25lO1xcbn1cXG50YWJsZSB7XFxuXFx0Ym9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXG5cXHRib3JkZXItc3BhY2luZzogMDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBodG1sIHtcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XG59XG5cbi5oaWRkZW4ge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbi5nYW1lLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGdhcDogMjBweDtcbiAganVzdGlmeS1jb250ZW50OiBzdGFydDtcbiAgYWxpZ24taXRlbXM6IHN0YXJ0O1xufVxuXG4uY29udGFpbmVyLW9uZSxcbi5jb250YWluZXItdHdvLFxuLmNvbnRhaW5lci10aHJlZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBnYXA6IDIwcHg7XG59XG5cbi5wLWdhbWUtYm9hcmQsXG4uYy1nYW1lLWJvYXJkIHtcbiAgYm9yZGVyOiAzcHggc29saWQgYmxhY2s7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44NTEpO1xuICBoZWlnaHQ6IDMwMHB4O1xuICB3aWR0aDogMzAwcHg7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcbn1cbi5kLWJvYXJkIHtcbiAgYm9yZGVyOiAzcHggc29saWQgYmxhY2s7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44NTEpO1xuICBoZWlnaHQ6IDMwMHB4O1xuICB3aWR0aDogMzAwcHg7XG59XG5cbi5jZWxsIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBib3JkZXI6IDAuNXB4IHNvbGlkIHJnYigxMTYsIDExNiwgMTE2KTtcbn1cblxuLmNlbGw6aG92ZXIge1xuICB6LWluZGV4OiA5OTtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xuICBib3JkZXItd2lkdGg6IDJweDtcbiAgLyogYmFja2dyb3VuZC1jb2xvcjogcmdiKDE3MiwgMjM0LCAxNzIpOyAqL1xuXG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmNlbGwub3ZlciB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNhOWZmYTk7XG59XG5cbi5jZWxsLm92ZXItLWludmFsaWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZkMGNiO1xufVxuXG4uY29weS1jdXJzb3Ige1xuICBjdXJzb3I6IGNvcHkgIWltcG9ydGFudDtcbn1cblxuLmNlbGwtLXNoaXAge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTlhOWZmO1xufVxuXG4uY2VsbC0tdW5hdmFpbGFibGUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZDhkOGQ4O1xufVxuXG4uY2VsbC0tdW5kaXNjb3ZlcmVkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg1MSkgIWltcG9ydGFudDtcbn1cblxuLmNlbGwtLW1pc3Mge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWQyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5jZWxsLS1taXNzOjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7IC8qIFJlcXVpcmVkIGZvciB0aGUgcHNldWRvLWVsZW1lbnQgdG8gYmUgZ2VuZXJhdGVkICovXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgd2lkdGg6IDVweDsgLyogU2l6ZSBvZiB0aGUgZG90ICovXG4gIGhlaWdodDogNXB4OyAvKiBTaXplIG9mIHRoZSBkb3QgKi9cbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7IC8qIENvbG9yIG9mIHRoZSBkb3QgKi9cbiAgdG9wOiA1MCU7IC8qIENlbnRlciB2ZXJ0aWNhbGx5ICovXG4gIGxlZnQ6IDUwJTsgLyogQ2VudGVyIGhvcml6b250YWxseSAqL1xuICBib3JkZXItcmFkaXVzOiA1MCU7IC8qIE1ha2VzIHRoZSBzaGFwZSBhIGNpcmNsZSAqL1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgLyogT2Zmc2V0IHRoZSBkb3QgdG8gdHJ1bHkgY2VudGVyIGl0ICovXG59XG5cbi5jZWxsLS1oaXQge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmYWZhZDI7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbiAgYm9yZGVyLXdpZHRoOiAxLjVweDtcbn1cblxuLmNlbGwtLWhpdDo6YmVmb3JlLFxuLmNlbGwtLWhpdDo6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAycHg7IC8qIFdpZHRoIG9mIHRoZSBcIlhcIiBsaW5lcyAqL1xuICBoZWlnaHQ6IDE1MCU7IC8qIEFkanVzdGVkIHRvIGZpdCB0aGUgc3F1YXJlICovXG4gIHRvcDogLTI1JTsgLyogQWRqdXN0ZWQgZm9yIGJldHRlciBjZW50ZXJpbmcgKi9cbiAgbGVmdDogNTAlOyAvKiBDZW50ZXIgaG9yaXpvbnRhbGx5ICovXG4gIGJhY2tncm91bmQtY29sb3I6IHJlZDsgLyogQ29sb3Igb2YgdGhlIFwiWFwiICovXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTsgLyogQ2VudGVyIHRoZSBsaW5lJ3Mgd2lkdGggKi9cbn1cblxuLmNlbGwtLWhpdDo6YmVmb3JlIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHJvdGF0ZSg0NWRlZyk7IC8qIENlbnRlciBhbmQgcm90YXRlIG9uZSBsaW5lIHRvIGZvcm0gb25lIHNsYXNoIG9mIHRoZSBcIlhcIiAqL1xufVxuXG4uY2VsbC0taGl0OjphZnRlciB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoLTQ1ZGVnKTsgLyogQ2VudGVyIGFuZCByb3RhdGUgdGhlIG90aGVyIGxpbmUgdG8gZm9ybSB0aGUgb3RoZXIgc2xhc2ggb2YgdGhlIFwiWFwiICovXG59XG5cbi5uZXh0LXBpZWNlLWJveCB7XG4gIGhlaWdodDogMTUwcHg7XG4gIHdpZHRoOiAxNTBweDtcbiAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigyMzgsIDIzOCwgMjM4KTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi5zaGlwLWRyYWdnYWJsZSB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtcm93czogMzBweDtcbn1cblxuLnNoaXAtZHJhZ2dhYmxlLnNoaXAtZHJhZ2dhYmxlLS1zaXplLTQge1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg0LCAzMHB4KTtcbn1cbi5zaGlwLWRyYWdnYWJsZS5zaGlwLWRyYWdnYWJsZS0tc2l6ZS0zIHtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMzBweCk7XG59XG4uc2hpcC1kcmFnZ2FibGUuc2hpcC1kcmFnZ2FibGUtLXNpemUtMiB7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDIsIDMwcHgpO1xufVxuLnNoaXAtZHJhZ2dhYmxlLnNoaXAtZHJhZ2dhYmxlLS1zaXplLTEge1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxLCAzMHB4KTtcbn1cblxuLnNoaXAtY2VsbC1kcmFnIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2E5YTlmZjtcbiAgYm9yZGVyOiAwLjVweCBzb2xpZCByZ2IoMTE2LCAxMTYsIDExNik7XG59XG5cbi5kLS1nYW1lLW92ZXItc2NyZWVuIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2E5ZmZhOTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMzBweDtcbn1cblxuaDIge1xuICBmb250LXNpemU6IDIwcHg7XG59XG5oMyB7XG4gIGZvbnQtc2l6ZTogMzBweDtcbn1cbmg0IHtcbiAgZm9udC1zaXplOiAyMHB4O1xufVxuXG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSx3QkFBd0I7QUFDMUI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztFQUNULHNCQUFzQjtFQUN0QixrQkFBa0I7QUFDcEI7O0FBRUE7OztFQUdFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLHVCQUF1QjtFQUN2QixTQUFTO0FBQ1g7O0FBRUE7O0VBRUUsdUJBQXVCO0VBQ3ZCLGFBQWE7RUFDYiw0Q0FBNEM7RUFDNUMsYUFBYTtFQUNiLFlBQVk7RUFDWixhQUFhO0VBQ2Isc0NBQXNDO0VBQ3RDLG1DQUFtQztBQUNyQztBQUNBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGFBQWE7RUFDYiw0Q0FBNEM7RUFDNUMsYUFBYTtFQUNiLFlBQVk7QUFDZDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixzQ0FBc0M7QUFDeEM7O0FBRUE7RUFDRSxXQUFXO0VBQ1gscUJBQXFCO0VBQ3JCLGlCQUFpQjtFQUNqQiwwQ0FBMEM7O0VBRTFDLGVBQWU7QUFDakI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx1REFBdUQ7QUFDekQ7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsV0FBVyxFQUFFLG9EQUFvRDtFQUNqRSxrQkFBa0I7RUFDbEIsVUFBVSxFQUFFLG9CQUFvQjtFQUNoQyxXQUFXLEVBQUUsb0JBQW9CO0VBQ2pDLHVCQUF1QixFQUFFLHFCQUFxQjtFQUM5QyxRQUFRLEVBQUUsc0JBQXNCO0VBQ2hDLFNBQVMsRUFBRSx3QkFBd0I7RUFDbkMsa0JBQWtCLEVBQUUsNkJBQTZCO0VBQ2pELGdDQUFnQyxFQUFFLHNDQUFzQztBQUMxRTs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQix5QkFBeUI7RUFDekIscUJBQXFCO0VBQ3JCLG1CQUFtQjtBQUNyQjs7QUFFQTs7RUFFRSxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLFVBQVUsRUFBRSwyQkFBMkI7RUFDdkMsWUFBWSxFQUFFLCtCQUErQjtFQUM3QyxTQUFTLEVBQUUsa0NBQWtDO0VBQzdDLFNBQVMsRUFBRSx3QkFBd0I7RUFDbkMscUJBQXFCLEVBQUUscUJBQXFCO0VBQzVDLDJCQUEyQixFQUFFLDRCQUE0QjtBQUMzRDs7QUFFQTtFQUNFLHlDQUF5QyxFQUFFLDREQUE0RDtBQUN6Rzs7QUFFQTtFQUNFLDBDQUEwQyxFQUFFLHdFQUF3RTtBQUN0SDs7QUFFQTtFQUNFLGFBQWE7RUFDYixZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixvQ0FBb0M7RUFDcEMsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0Usc0NBQXNDO0FBQ3hDO0FBQ0E7RUFDRSxzQ0FBc0M7QUFDeEM7QUFDQTtFQUNFLHNDQUFzQztBQUN4QztBQUNBO0VBQ0Usc0NBQXNDO0FBQ3hDOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixZQUFZO0VBQ1osV0FBVztFQUNYLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsbUJBQW1CO0VBQ25CLHVCQUF1QjtFQUN2QixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxlQUFlO0FBQ2pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImh0bWwge1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uZ2FtZS1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMjBweDtcXG4gIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogc3RhcnQ7XFxufVxcblxcbi5jb250YWluZXItb25lLFxcbi5jb250YWluZXItdHdvLFxcbi5jb250YWluZXItdGhyZWUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBnYXA6IDIwcHg7XFxufVxcblxcbi5wLWdhbWUtYm9hcmQsXFxuLmMtZ2FtZS1ib2FyZCB7XFxuICBib3JkZXI6IDNweCBzb2xpZCBibGFjaztcXG4gIHBhZGRpbmc6IDEwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuODUxKTtcXG4gIGhlaWdodDogMzAwcHg7XFxuICB3aWR0aDogMzAwcHg7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcXG59XFxuLmQtYm9hcmQge1xcbiAgYm9yZGVyOiAzcHggc29saWQgYmxhY2s7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg1MSk7XFxuICBoZWlnaHQ6IDMwMHB4O1xcbiAgd2lkdGg6IDMwMHB4O1xcbn1cXG5cXG4uY2VsbCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBib3JkZXI6IDAuNXB4IHNvbGlkIHJnYigxMTYsIDExNiwgMTE2KTtcXG59XFxuXFxuLmNlbGw6aG92ZXIge1xcbiAgei1pbmRleDogOTk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMik7XFxuICBib3JkZXItd2lkdGg6IDJweDtcXG4gIC8qIGJhY2tncm91bmQtY29sb3I6IHJnYigxNzIsIDIzNCwgMTcyKTsgKi9cXG5cXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNlbGwub3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTlmZmE5O1xcbn1cXG5cXG4uY2VsbC5vdmVyLS1pbnZhbGlkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmQwY2I7XFxufVxcblxcbi5jb3B5LWN1cnNvciB7XFxuICBjdXJzb3I6IGNvcHkgIWltcG9ydGFudDtcXG59XFxuXFxuLmNlbGwtLXNoaXAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2E5YTlmZjtcXG59XFxuXFxuLmNlbGwtLXVuYXZhaWxhYmxlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkOGQ4ZDg7XFxufVxcblxcbi5jZWxsLS11bmRpc2NvdmVyZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjg1MSkgIWltcG9ydGFudDtcXG59XFxuXFxuLmNlbGwtLW1pc3Mge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFkMjtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmNlbGwtLW1pc3M6OmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFwiOyAvKiBSZXF1aXJlZCBmb3IgdGhlIHBzZXVkby1lbGVtZW50IHRvIGJlIGdlbmVyYXRlZCAqL1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDVweDsgLyogU2l6ZSBvZiB0aGUgZG90ICovXFxuICBoZWlnaHQ6IDVweDsgLyogU2l6ZSBvZiB0aGUgZG90ICovXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsgLyogQ29sb3Igb2YgdGhlIGRvdCAqL1xcbiAgdG9wOiA1MCU7IC8qIENlbnRlciB2ZXJ0aWNhbGx5ICovXFxuICBsZWZ0OiA1MCU7IC8qIENlbnRlciBob3Jpem9udGFsbHkgKi9cXG4gIGJvcmRlci1yYWRpdXM6IDUwJTsgLyogTWFrZXMgdGhlIHNoYXBlIGEgY2lyY2xlICovXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsgLyogT2Zmc2V0IHRoZSBkb3QgdG8gdHJ1bHkgY2VudGVyIGl0ICovXFxufVxcblxcbi5jZWxsLS1oaXQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFkMjtcXG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcXG4gIGJvcmRlci13aWR0aDogMS41cHg7XFxufVxcblxcbi5jZWxsLS1oaXQ6OmJlZm9yZSxcXG4uY2VsbC0taGl0OjphZnRlciB7XFxuICBjb250ZW50OiBcXFwiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAycHg7IC8qIFdpZHRoIG9mIHRoZSBcXFwiWFxcXCIgbGluZXMgKi9cXG4gIGhlaWdodDogMTUwJTsgLyogQWRqdXN0ZWQgdG8gZml0IHRoZSBzcXVhcmUgKi9cXG4gIHRvcDogLTI1JTsgLyogQWRqdXN0ZWQgZm9yIGJldHRlciBjZW50ZXJpbmcgKi9cXG4gIGxlZnQ6IDUwJTsgLyogQ2VudGVyIGhvcml6b250YWxseSAqL1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOyAvKiBDb2xvciBvZiB0aGUgXFxcIlhcXFwiICovXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7IC8qIENlbnRlciB0aGUgbGluZSdzIHdpZHRoICovXFxufVxcblxcbi5jZWxsLS1oaXQ6OmJlZm9yZSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKDQ1ZGVnKTsgLyogQ2VudGVyIGFuZCByb3RhdGUgb25lIGxpbmUgdG8gZm9ybSBvbmUgc2xhc2ggb2YgdGhlIFxcXCJYXFxcIiAqL1xcbn1cXG5cXG4uY2VsbC0taGl0OjphZnRlciB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyk7IC8qIENlbnRlciBhbmQgcm90YXRlIHRoZSBvdGhlciBsaW5lIHRvIGZvcm0gdGhlIG90aGVyIHNsYXNoIG9mIHRoZSBcXFwiWFxcXCIgKi9cXG59XFxuXFxuLm5leHQtcGllY2UtYm94IHtcXG4gIGhlaWdodDogMTUwcHg7XFxuICB3aWR0aDogMTUwcHg7XFxuICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM4LCAyMzgsIDIzOCk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4uc2hpcC1kcmFnZ2FibGUge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMzBweDtcXG59XFxuXFxuLnNoaXAtZHJhZ2dhYmxlLnNoaXAtZHJhZ2dhYmxlLS1zaXplLTQge1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNCwgMzBweCk7XFxufVxcbi5zaGlwLWRyYWdnYWJsZS5zaGlwLWRyYWdnYWJsZS0tc2l6ZS0zIHtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIDMwcHgpO1xcbn1cXG4uc2hpcC1kcmFnZ2FibGUuc2hpcC1kcmFnZ2FibGUtLXNpemUtMiB7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAzMHB4KTtcXG59XFxuLnNoaXAtZHJhZ2dhYmxlLnNoaXAtZHJhZ2dhYmxlLS1zaXplLTEge1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMSwgMzBweCk7XFxufVxcblxcbi5zaGlwLWNlbGwtZHJhZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTlhOWZmO1xcbiAgYm9yZGVyOiAwLjVweCBzb2xpZCByZ2IoMTE2LCAxMTYsIDExNik7XFxufVxcblxcbi5kLS1nYW1lLW92ZXItc2NyZWVuIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhOWZmYTk7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgZ2FwOiAzMHB4O1xcbn1cXG5cXG5oMiB7XFxuICBmb250LXNpemU6IDIwcHg7XFxufVxcbmgzIHtcXG4gIGZvbnQtc2l6ZTogMzBweDtcXG59XFxuaDQge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcmVzZXQuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLy8gdGhpcyB3aWxsIGJlIGEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgc2hpcHNcblxuY29uc3QgY3JlYXRlU2hpcCA9IChzaXplKSA9PiB7XG4gIGxldCBoaXRzID0gMDtcbiAgY29uc3QgaGl0ID0gKCkgPT4ge1xuICAgIGhpdHMgKz0gMTtcbiAgfTtcbiAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgIHJldHVybiBoaXRzID49IHNpemUgPyB0cnVlIDogZmFsc2U7XG4gIH07XG5cbiAgY29uc3QgZ2V0U2l6ZSA9ICgpID0+IHtcbiAgICByZXR1cm4gc2l6ZVxuICB9XG4gIHJldHVybiB7XG4gICAgaGl0LFxuICAgIGlzU3VuayxcbiAgICBnZXRTaXplXG4gIH07XG59O1xuXG5leHBvcnQgeyBjcmVhdGVTaGlwIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVTaGlwIH0gZnJvbSBcIi4vc2hpcC5qc1wiO1xuXG5jb25zdCBjcmVhdGVUaWxlID0gKCkgPT4ge1xuICAvLyB0eXBlcyBvZiB0aWxlczpcbiAgLy8gZW1wdHlcbiAgLy8gc2hpcFxuICAvLyB1bmF2YWlsYWJsZVxuICBsZXQgdHlwZSA9IFwiZW1wdHlcIjtcbiAgLy8gdGhlIHNoaXAgcHJvcGVydHkgd2lsbCBvbmx5IGJlIHNldCBpZiB0aGVyZSBpcyBhIHNoaXAgb24gdGhlIHRpbGVcbiAgbGV0IHNoaXAgPSBudWxsO1xuICAvLyBoaXQgc3RhdHVzOlxuICAvLyB1bmRpc2NvdmVyZWRcbiAgLy8gaGl0XG4gIC8vIG1pc3NlZFxuICBsZXQgaGl0U3RhdHVzID0gXCJ1bmRpc2NvdmVyZWRcIjtcbiAgcmV0dXJuIHsgdHlwZSwgc2hpcCwgaGl0U3RhdHVzIH07XG59O1xuXG5jb25zdCBjcmVhdGVHYW1lQm9hcmQgPSAoKSA9PiB7XG4gIGNvbnN0IHNoaXBzID0gW1xuICAgIGNyZWF0ZVNoaXAoNCksXG4gICAgY3JlYXRlU2hpcCgzKSxcbiAgICBjcmVhdGVTaGlwKDMpLFxuICAgIGNyZWF0ZVNoaXAoMiksXG4gICAgY3JlYXRlU2hpcCgyKSxcbiAgICBjcmVhdGVTaGlwKDIpLFxuICAgIGNyZWF0ZVNoaXAoMSksXG4gICAgY3JlYXRlU2hpcCgxKSxcbiAgICBjcmVhdGVTaGlwKDEpLFxuICAgIGNyZWF0ZVNoaXAoMSksXG4gIF07XG4gIGxldCBjdXJyZW50U2hpcEluZGV4ID0gMDtcblxuICBsZXQgZ3JpZCA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwIH0sICgpID0+XG4gICAgQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSwgKCkgPT4gY3JlYXRlVGlsZSgpKVxuICApO1xuICBjb25zdCBnZXRHcmlkID0gKCkgPT4ge1xuICAgIHJldHVybiBncmlkO1xuICB9O1xuXG4gIGNvbnN0IGlzVmFsaWRTcG90ID0gKHNoaXBMZW4sIGNvb3JkcywgaG9yaXpvbnRhbCkgPT4ge1xuICAgIGxldCB2YWxpZCA9IHRydWU7XG4gICAgbGV0IHggPSBjb29yZHNbMF07XG4gICAgbGV0IHkgPSBjb29yZHNbMV07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBMZW47IGkrKykge1xuICAgICAgaWYgKHggPiA5IHx8IHkgPiA5KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRUaWxlID0gZ3JpZFt5XVt4XTtcbiAgICAgIGlmICghY3VycmVudFRpbGUgfHwgY3VycmVudFRpbGUudHlwZSAhPT0gXCJlbXB0eVwiKSB7XG4gICAgICAgIHZhbGlkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGhvcml6b250YWwpIHggKz0gMTtcbiAgICAgIGVsc2UgeSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZDtcbiAgfTtcblxuICBjb25zdCBnZXRUb0JlU2hpcFRpbGVzID0gKHNoaXBMZW4sIGNvb3JkcywgaG9yaXpvbnRhbCkgPT4ge1xuICAgIGNvbnN0IHJldHVybkFyciA9IFtdO1xuICAgIGxldCB4ID0gY29vcmRzWzBdO1xuICAgIGxldCB5ID0gY29vcmRzWzFdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcExlbjsgaSsrKSB7XG4gICAgICByZXR1cm5BcnIucHVzaChncmlkW3ldW3hdKTtcbiAgICAgIGlmIChob3Jpem9udGFsKSB4ICs9IDE7XG4gICAgICBlbHNlIHkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dXJuQXJyO1xuICB9O1xuXG4gIGNvbnN0IGdldFRvQmVVbmF2YWlsYWJsZVRpbGVzID0gKHNoaXBMZW4sIGNvb3JkcywgaG9yaXpvbnRhbCkgPT4ge1xuICAgIGNvbnN0IHJldHVybkFyciA9IFtdO1xuICAgIGNvbnN0IGRYID0gWzAsIDEsIDEsIDEsIDAsIC0xLCAtMSwgLTFdO1xuICAgIGNvbnN0IGRZID0gWy0xLCAtMSwgMCwgMSwgMSwgMSwgMCwgLTFdO1xuICAgIGxldCBzaGlwWCA9IGNvb3Jkc1swXTtcbiAgICBsZXQgc2hpcFkgPSBjb29yZHNbMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwTGVuOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgaisrKSB7XG4gICAgICAgIGNvbnN0IHggPSBzaGlwWCArIGRYW2pdO1xuICAgICAgICBjb25zdCB5ID0gc2hpcFkgKyBkWVtqXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHggPiAtMSAmJlxuICAgICAgICAgIHggPCAxMCAmJlxuICAgICAgICAgIHkgPiAtMSAmJlxuICAgICAgICAgIHkgPCAxMCAmJlxuICAgICAgICAgIGdyaWRbeV1beF0udHlwZSA9PT0gXCJlbXB0eVwiICYmXG4gICAgICAgICAgIXJldHVybkFyci5pbmNsdWRlcyhncmlkW3ldW3hdKVxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuQXJyLnB1c2goZ3JpZFt5XVt4XSk7XG4gICAgICB9XG4gICAgICBpZiAoaG9yaXpvbnRhbCkgc2hpcFggKz0gMTtcbiAgICAgIGVsc2Ugc2hpcFkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0dXJuQXJyO1xuICB9O1xuICBjb25zdCBwbGFjZVNoaXAgPSAoc2hpcCA9IHNoaXBzW2N1cnJlbnRTaGlwSW5kZXhdLCBjb29yZHMsIGhvcml6b250YWwpID0+IHtcbiAgICBpZiAoc2hpcCkge1xuICAgICAgbGV0IHBsYWNlZFNoaXAgPSBpc1ZhbGlkU3BvdChzaGlwLmdldFNpemUoKSwgY29vcmRzLCBob3Jpem9udGFsKTtcblxuICAgICAgaWYgKHBsYWNlZFNoaXApIHtcbiAgICAgICAgY3VycmVudFNoaXBJbmRleCsrO1xuICAgICAgICBjb25zdCBzaGlwVGlsZXMgPSBnZXRUb0JlU2hpcFRpbGVzKHNoaXAuZ2V0U2l6ZSgpLCBjb29yZHMsIGhvcml6b250YWwpO1xuICAgICAgICBzaGlwVGlsZXMuZm9yRWFjaCgodGlsZSkgPT4ge1xuICAgICAgICAgIHRpbGUudHlwZSA9IFwic2hpcFwiO1xuICAgICAgICAgIHRpbGUuc2hpcCA9IHNoaXA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHVuYXZhaWxhYmxlVGlsZXMgPSBnZXRUb0JlVW5hdmFpbGFibGVUaWxlcyhcbiAgICAgICAgICBzaGlwLmdldFNpemUoKSxcbiAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgaG9yaXpvbnRhbFxuICAgICAgICApO1xuICAgICAgICB1bmF2YWlsYWJsZVRpbGVzLmZvckVhY2goKHRpbGUpID0+ICh0aWxlLnR5cGUgPSBcInVuYXZhaWxhYmxlXCIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBsYWNlZFNoaXA7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbiAgY29uc3QgZmlyZVNob3QgPSAoY29vcmRzKSA9PiB7XG4gICAgY29uc3QgeCA9IGNvb3Jkc1swXTtcbiAgICBjb25zdCB5ID0gY29vcmRzWzFdO1xuICAgIGlmIChncmlkW3ldW3hdLmhpdFN0YXR1cyAhPT0gXCJ1bmRpc2NvdmVyZWRcIikgcmV0dXJuIGZhbHNlO1xuICAgIGVsc2UgaWYgKGdyaWRbeV1beF0udHlwZSA9PT0gXCJlbXB0eVwiIHx8IGdyaWRbeV1beF0udHlwZSA9PT0gXCJ1bmF2YWlsYWJsZVwiKSB7XG4gICAgICBncmlkW3ldW3hdLmhpdFN0YXR1cyA9IFwibWlzc2VkXCI7XG4gICAgICByZXR1cm4gXCJtaXNzXCI7XG4gICAgfSBlbHNlIGlmIChncmlkW3ldW3hdLnR5cGUgPT09IFwic2hpcFwiKSB7XG4gICAgICBncmlkW3ldW3hdLmhpdFN0YXR1cyA9IFwiaGl0XCI7XG4gICAgICBncmlkW3ldW3hdLnNoaXAuaGl0KCk7XG4gICAgICByZXR1cm4gXCJoaXRcIjtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGFsbFNoaXBzU3VuayA9ICgpID0+IHtcbiAgICByZXR1cm4gc2hpcHMuZXZlcnkoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkpO1xuICB9O1xuXG4gIGNvbnN0IHJlc2V0R3JpZCA9ICgpID0+IHtcbiAgICBncmlkID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogMTAgfSwgKCkgPT5cbiAgICAgIEFycmF5LmZyb20oeyBsZW5ndGg6IDEwIH0sICgpID0+IGNyZWF0ZVRpbGUoKSlcbiAgICApO1xuXG4gICAgY3VycmVudFNoaXBJbmRleCA9IDA7XG4gIH07XG5cbiAgY29uc3QgYWxsU2hpcHNQbGFjZWQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRTaGlwSW5kZXggPiA4O1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldEdyaWQsXG4gICAgcGxhY2VTaGlwLFxuICAgIGZpcmVTaG90LFxuICAgIGFsbFNoaXBzU3VuayxcbiAgICByZXNldEdyaWQsXG4gICAgYWxsU2hpcHNQbGFjZWQsXG4gICAgaXNWYWxpZFNwb3RcbiAgfTtcbn07XG5cbi8vIGNvbnN0IHRlc3QgPSBjcmVhdGVHYW1lQm9hcmQoKTtcbi8vIGNvbnNvbGUubG9nKHRlc3QuaXNWYWxpZFNwb3QoMywgWzksIDhdLCBmYWxzZSkpO1xuXG5leHBvcnQgeyBjcmVhdGVHYW1lQm9hcmQgfTtcbiIsImNvbnN0IERPTU1hbmlwdWxhdG9yID0gKCkgPT4ge1xuICBjb25zdCBkcmF3R3JpZCA9IChwbGF5ZXIpID0+IHtcbiAgICAvLyB0YWtlcyBpbiBhIHBsYXllciwgYW5kIHVzZXMgdGhlaXIgZ2FtZUJvYXJkIHRvIHBsYWNlIHRoZSB0aGUgc2hpcHMgd2hlcmUgdGhleSBnby5cbiAgICAvLyBjcmVhdGVzIDEwMCBjZWxscyB3aXRoIHRoZSBjb3JyZWN0IHN1YmNsYXNzLCBhcHBlbmRzIHRoZW0gdG8gdGhlIGNvcnJlY3QgZ2FtZUJvYXJkIGluIEhUTUxcbiAgICAvLyBwbGF5ZXIuZ2FtZUJvYXJkLnJlc2V0R3JpZCgpO1xuICAgIGNvbnN0IGdyaWQgPSBwbGF5ZXIuZ2FtZUJvYXJkLmdldEdyaWQoKS5mbGF0KCk7XG4gICAgY29uc3QgZ2FtZUJvYXJkRE9NID0gcGxheWVyLmF0dGFja1xuICAgICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmMtZ2FtZS1ib2FyZFwiKVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnAtZ2FtZS1ib2FyZFwiKTtcblxuICAgIGdhbWVCb2FyZERPTS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgZ3JpZC5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICBjb25zdCBjZWxsRE9NID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNlbGxET00uY2xhc3NOYW1lID0gcGxheWVyLmF0dGFjayA/IFwiY2VsbCBjZWxsLS11bmRpc2NvdmVyZWRcIiA6IFwiY2VsbFwiO1xuICAgICAgaWYgKGNlbGwudHlwZSA9PT0gXCJzaGlwXCIpIHtcbiAgICAgICAgY2VsbERPTS5jbGFzc0xpc3QuYWRkKFwiY2VsbC0tc2hpcFwiKTtcbiAgICAgIH0gZWxzZSBpZiAoY2VsbC50eXBlID09PSBcInVuYXZhaWxhYmxlXCIpIHtcbiAgICAgICAgY2VsbERPTS5jbGFzc0xpc3QuYWRkKFwiY2VsbC0tdW5hdmFpbGFibGVcIik7XG4gICAgICB9XG5cbiAgICAgIGdhbWVCb2FyZERPTS5hcHBlbmRDaGlsZChjZWxsRE9NKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCByZXR1cm5DbGlja2VkQ2VsbENvb3JkcyA9IGFzeW5jIChwbGF5ZXIpID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgZ2FtZUJvYXJkID0gcGxheWVyLmF0dGFja1xuICAgICAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYy1nYW1lLWJvYXJkXCIpXG4gICAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wLWdhbWUtYm9hcmRcIik7XG5cbiAgICAgIGNvbnN0IGNlbGxzID0gZ2FtZUJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2VsbFwiKTtcbiAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwsIGkpID0+IHtcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHggPSBpICUgMTA7XG4gICAgICAgICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcigoaSAvIDEwKSAlIDEwKTtcbiAgICAgICAgICAgIHJlc29sdmUoW1t4LCB5XSwgaV0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBvbmNlOiB0cnVlIH1cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHBsYXllclNob3QgPSAoZW5lbXksIGNlbGxOVU0pID0+IHtcbiAgICBjb25zdCBnYW1lQm9hcmQgPSBlbmVteS5hdHRhY2tcbiAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jLWdhbWUtYm9hcmRcIilcbiAgICAgIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wLWdhbWUtYm9hcmRcIik7XG5cbiAgICBjb25zdCBjZWxsID0gZ2FtZUJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2VsbFwiKVtjZWxsTlVNXTtcblxuICAgIGlmIChjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcImNlbGwtLXNoaXBcIikpIHtcbiAgICAgIGNlbGwuY2xhc3NOYW1lID0gXCJjZWxsIGNlbGwtLWhpdFwiO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjZWxsLmNsYXNzTGlzdC5jb250YWlucyhcImNlbGwtLXVuYXZhaWxhYmxlXCIpIHx8XG4gICAgICBjZWxsLmNsYXNzTmFtZSA9PT0gXCJjZWxsIGNlbGwtLXVuZGlzY292ZXJlZFwiIHx8XG4gICAgICBjZWxsLmNsYXNzTmFtZSA9PT0gXCJjZWxsXCJcbiAgICApIHtcbiAgICAgIGNlbGwuY2xhc3NOYW1lID0gXCJjZWxsIGNlbGwtLW1pc3NcIjtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGlzcGxheUdhbWVPdmVyU2NyZWVuID0gKHdpbm5lcikgPT4ge1xuICAgIGNvbnN0IGdhbWVPdmVyU2NyZWVuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kLS1nYW1lLW92ZXItc2NyZWVuXCIpO1xuICAgIGdhbWVPdmVyU2NyZWVuLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuXCIpLnRleHRDb250ZW50ID0gd2lubmVyLmF0dGFja1xuICAgICAgPyBcIkNPTVBVVEVSXCJcbiAgICAgIDogXCJZT1VcIjtcbiAgICBnYW1lT3ZlclNjcmVlbi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xuICB9O1xuXG4gIGNvbnN0IGNsaWNrZWRSZWFkeVNoaXBzID0gYXN5bmMgKHBsYXllcikgPT4ge1xuICAgIGNvbnN0IGJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmVhZHktc2hpcHMtYnRuXCIpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBpZiAocGxheWVyLmdhbWVCb2FyZC5hbGxTaGlwc1BsYWNlZCgpKSByZXNvbHZlKCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICB9IC8vIG1ha2UgdGhlIG5leHQgc2hpcCBib3ggc2hha2UgcmVkLlxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgZ3JleU91dFNoaXBCdXR0b25zID0gKCkgPT4ge1xuICAgIGNvbnN0IGJ0bnMgPSBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcC1idG5zXCIpXG4gICAgICAucXVlcnlTZWxlY3RvckFsbChcImJ1dHRvblwiKTtcblxuICAgIGJ0bnMuZm9yRWFjaCgoYnRuKSA9PiB7XG4gICAgICBidG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCB1bkdyZXlTaGlwQnV0dG9ucyA9ICgpID0+IHtcbiAgICBjb25zdCBidG5zID0gZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLnNoaXAtYnRuc1wiKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b25cIik7XG5cbiAgICBidG5zLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgYnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlRHJhZ2dhYmxlID0gKG5ld1NoaXBTaXplKSA9PiB7XG4gICAgY29uc3QgZHJhZ2dhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaGlwLWRyYWdnYWJsZVwiKTtcbiAgICAvLyBjaGFuZ2UgdGhlIGNoaWxkcmVuIGluIGRyYWdnYWJsZVxuICAgIGRyYWdnYWJsZS5pbm5lckhUTUwgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3U2hpcFNpemU7IGkrKykge1xuICAgICAgY29uc3Qgc2hpcENlbGxEcmFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHNoaXBDZWxsRHJhZy5jbGFzc0xpc3QuYWRkKFwic2hpcC1jZWxsLWRyYWdcIik7XG4gICAgICBkcmFnZ2FibGUuYXBwZW5kQ2hpbGQoc2hpcENlbGxEcmFnKTtcbiAgICB9XG4gICAgLy8gY2hhbmdlIHRoZSBjbGFzc0xpc3QgaW4gZHJhZ2dhYmxlXG4gICAgZHJhZ2dhYmxlLmNsYXNzTmFtZSA9IGBzaGlwLWRyYWdnYWJsZSBzaGlwLWRyYWdnYWJsZS0tc2l6ZS0ke25ld1NoaXBTaXplfWA7XG4gICAgLy8gY2hhbmdlIHRoZSBzaGlwLXNpemUgZGF0YSBpbiBkcmFnZ2FibGVcbiAgICBkcmFnZ2FibGUuZGF0YXNldC5zaGlwU2l6ZSA9IGAke25ld1NoaXBTaXplfWA7XG4gIH07XG5cbiAgY29uc3QgZGF0YVNldEFyciA9IFsxLCAxLCAxLCAxLCAyLCAyLCAyLCAzLCAzXTtcbiAgY29uc3QgaGFuZGxlRHJhZ3MgPSAocGxheWVyKSA9PiB7XG4gICAgY29uc3QgZ2FtZUJvYXJkRE9NID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wLWdhbWUtYm9hcmRcIik7XG4gICAgY29uc3QgZHJhZ2dhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaGlwLWRyYWdnYWJsZVwiKTtcbiAgICBjb25zdCBjZWxscyA9IGdhbWVCb2FyZERPTS5xdWVyeVNlbGVjdG9yQWxsKFwiLmNlbGxcIik7XG4gICAgY29uc3QgaG92ZXJlZE92ZXJDb29yZHMgPSBbLTEsIC0xXTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydChldmVudCkge1xuICAgICAgdGhpcy5zdHlsZS5vcGFjaXR5ID0gXCIwLjNcIjtcblxuICAgICAgLy8gbWFrZSB0aGUgZmlyc3QgY2VsbCBiZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSBjdXJzb3JcbiAgICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREcmFnSW1hZ2UoZHJhZ2dhYmxlLCAxNSwgMTUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdFbmQoZSkge1xuICAgICAgdGhpcy5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG4gICAgICAvLyBpZiB0aGUgYm9hdCBpcyBvdmVyIGEgY2VsbCwgY2hlY2sgaWYgdGhlIHNwb3QgaXMgdmFsaWQuXG4gICAgICBpZiAocGxheWVyLmdhbWVCb2FyZC5wbGFjZVNoaXAodW5kZWZpbmVkLCBob3ZlcmVkT3ZlckNvb3JkcywgdHJ1ZSkpIHtcbiAgICAgICAgY29uc29sZS5sb2coaG92ZXJlZE92ZXJDb29yZHMpO1xuICAgICAgICBkcmF3R3JpZChwbGF5ZXIpO1xuICAgICAgICAvLyB1cGRhdGVEcmFnZ2FibGVcbiAgICAgICAgdXBkYXRlRHJhZ2dhYmxlKGRhdGFTZXRBcnIucG9wKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coaG92ZXJlZE92ZXJDb29yZHMpO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVEcmFncyhwbGF5ZXIpO1xuICAgIH1cblxuICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ3N0YXJ0XCIsIGhhbmRsZURyYWdTdGFydCwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLCBoYW5kbGVEcmFnRW5kLCB7IG9uY2U6IHRydWUgfSk7XG5cbiAgICBjZWxscy5mb3JFYWNoKChjZWxsLCBpKSA9PiB7XG4gICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnbGVhdmVcIiwgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIldvcmtpbmdcIik7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcIm92ZXJcIik7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZShcIm92ZXItLWludmFsaWRcIik7XG4gICAgICB9KTtcbiAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdlbnRlclwiLCAoKSA9PiB7XG4gICAgICAgIGhvdmVyZWRPdmVyQ29vcmRzWzBdID0gaSAlIDEwO1xuICAgICAgICBob3ZlcmVkT3ZlckNvb3Jkc1sxXSA9IE1hdGguZmxvb3IoKGkgLyAxMCkgJSAxMCk7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcbiAgICAgICAgICBwbGF5ZXIuZ2FtZUJvYXJkLmlzVmFsaWRTcG90KFxuICAgICAgICAgICAgZHJhZ2dhYmxlLmRhdGFzZXQuc2hpcFNpemUsXG4gICAgICAgICAgICBob3ZlcmVkT3ZlckNvb3JkcyxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApXG4gICAgICAgICAgICA/IFwib3ZlclwiXG4gICAgICAgICAgICA6IFwib3Zlci0taW52YWxpZFwiXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGRyYXdHcmlkLFxuICAgIHJldHVybkNsaWNrZWRDZWxsQ29vcmRzLFxuICAgIHBsYXllclNob3QsXG4gICAgZGlzcGxheUdhbWVPdmVyU2NyZWVuLFxuICAgIGNsaWNrZWRSZWFkeVNoaXBzLFxuICAgIGdyZXlPdXRTaGlwQnV0dG9ucyxcbiAgICBoYW5kbGVEcmFncyxcbiAgICB1bkdyZXlTaGlwQnV0dG9ucyxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IERPTU1hbmlwdWxhdG9yIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb21wdXRlclBsYXllciwgY3JlYXRlSHVtYW5QbGF5ZXIgfSBmcm9tIFwiLi9wYXJ0aWNpcGFudHMuanNcIjtcbmltcG9ydCB7IERPTU1hbmlwdWxhdG9yIH0gZnJvbSBcIi4vbWFuaXB1bGF0ZURPTS5qc1wiO1xuXG5jb25zdCBnYW1lID0gYXN5bmMgKCkgPT4ge1xuICAvLyBiZWdpbm5pbmcgb2YgZ2FtZVxuICBjb25zdCBkb20gPSBET01NYW5pcHVsYXRvcigpO1xuICBjb25zdCBwbGF5ZXIgPSBjcmVhdGVIdW1hblBsYXllcigpO1xuICBjb25zdCBjb21wdXRlciA9IGNyZWF0ZUNvbXB1dGVyUGxheWVyKCk7XG5cbiAgLy8gc2V0IGEgY3VycmVudFBsYXllciB2YWx1ZVxuICBsZXQgY3VycmVudFBsYXllciA9IHBsYXllcjtcblxuICAvLyBmdW5jdGlvbiB0byBzd2l0Y2hDdXJyZW50IHBsYXllclxuICBjb25zdCBuZXh0UGxheWVyID0gKCkgPT4gKGN1cnJlbnRQbGF5ZXIgPT09IHBsYXllciA/IGNvbXB1dGVyIDogcGxheWVyKTtcblxuICBkb20udW5HcmV5U2hpcEJ1dHRvbnMoKTtcbiAgLy8gcGxheWVycyBwbGFjZSB0aGVpciBzaGlwcyBvbiB0aGUgYm9hcmQgdW50aWwgYWxsIHRlbiBzaGlwcyBhcmUgcGxhY2VkLlxuICAvLyBtYWtlIGl0IHNvIHBsYXllciBjYW4gcGxhY2UgdGhlaXIgc2hpcHMuIHRoZSBnYW1lIHdvbnQgc3RhcnQgdW50aWwgdGhlIHBsYXllciBoYXMgcGxhY2UgdGhlaXIgc2hpcHNcblxuICBkb20uZHJhd0dyaWQocGxheWVyKTtcbiAgZG9tLmRyYXdHcmlkKGNvbXB1dGVyKTtcblxuICBkb20uaGFuZGxlRHJhZ3MocGxheWVyKTtcblxuICBjb25zdCByYW5kb21pemVTaGlwcyA9IChwKSA9PiB7XG4gICAgcC5nYW1lQm9hcmQucmVzZXRHcmlkKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoOSArIDEpKTtcbiAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg5ICsgMSkpO1xuICAgICAgICBpZiAocC5nYW1lQm9hcmQucGxhY2VTaGlwKHVuZGVmaW5lZCwgW3gsIHldLCB4ICUgMiA9PT0gMCkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBkb20uZHJhd0dyaWQocCk7XG4gIH07XG5cbiAgLy8gcmVzZXQgc2hpcHMgYnV0dG9uXG4gIGNvbnN0IHJlc2V0U2hpcHNCVE4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jlc2V0LXNoaXBzLWJ0blwiKTtcbiAgcmVzZXRTaGlwc0JUTi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgIHBsYXllci5nYW1lQm9hcmQucmVzZXRHcmlkKCk7XG4gICAgZG9tLmRyYXdHcmlkKHBsYXllcik7XG4gIH0pO1xuICAvLyByYW5kb21pemVTaGlwcygpO1xuICBjb25zdCByYW5kb21pemVTaGlwc0JUTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcmFuZG9taXplLXNoaXBzLWJ0blwiKTtcbiAgcmFuZG9taXplU2hpcHNCVE4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICByYW5kb21pemVTaGlwcyhwbGF5ZXIpO1xuICB9KTtcblxuICAvLyByZWFkeSBnYW1lIHN0YXRlLiBNYWtlIHN1cmUgdGhhdCBhbGwgdGhlIHBsYXllciBzaGlwcyBhcmUgcGxhY2VkLlxuICBhd2FpdCBkb20uY2xpY2tlZFJlYWR5U2hpcHMocGxheWVyKTtcbiAgZG9tLmdyZXlPdXRTaGlwQnV0dG9ucygpO1xuXG4gIC8vIG1ha2UgaXQgc28gdGhlIGNvbXB1dGVyIHJhbmRvbWx5IHBsYWNlcyBzaGlwc1xuICBjb21wdXRlci5nYW1lQm9hcmQucmVzZXRHcmlkKCk7XG4gIHJhbmRvbWl6ZVNoaXBzKGNvbXB1dGVyKTtcblxuICBsZXQgY29udGludWVHYW1lID0gdHJ1ZTtcblxuICBjb25zdCBjdXJyZW50UGxheWVyRmlyZSA9IGFzeW5jICgpID0+IHtcbiAgICAvLyBnZXQgY2xpY2tlZCBjZWxsIGNvb3Jkc1xuICAgIGNvbnN0IGZpcmVDb29yZHMgPSBjdXJyZW50UGxheWVyLmF0dGFja1xuICAgICAgPyBjdXJyZW50UGxheWVyLmF0dGFjaygpXG4gICAgICA6IGF3YWl0IGRvbS5yZXR1cm5DbGlja2VkQ2VsbENvb3JkcyhuZXh0UGxheWVyKCkpO1xuXG4gICAgLy8gaWYgLmZpcmVTaG90IGlzIHZhbGlkLCB1cGRhdGUgSFRNTFxuICAgIGNvbnN0IHNob3RSZXNwb25zZSA9IG5leHRQbGF5ZXIoKS5nYW1lQm9hcmQuZmlyZVNob3QoZmlyZUNvb3Jkc1swXSk7XG4gICAgaWYgKHNob3RSZXNwb25zZSA9PT0gXCJoaXRcIikge1xuICAgICAgZG9tLnBsYXllclNob3QobmV4dFBsYXllcigpLCBmaXJlQ29vcmRzWzFdKTtcbiAgICAgIGlmIChuZXh0UGxheWVyKCkuZ2FtZUJvYXJkLmFsbFNoaXBzU3VuaygpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50UGxheWVyRmlyZSgpO1xuICAgIH0gZWxzZSBpZiAoc2hvdFJlc3BvbnNlID09PSBcIm1pc3NcIikge1xuICAgICAgZG9tLnBsYXllclNob3QobmV4dFBsYXllcigpLCBmaXJlQ29vcmRzWzFdKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3VycmVudFBsYXllckZpcmUoKTtcbiAgICB9XG4gIH07XG5cbiAgd2hpbGUgKGNvbnRpbnVlR2FtZSkge1xuICAgIGNvbnRpbnVlR2FtZSA9IGF3YWl0IGN1cnJlbnRQbGF5ZXJGaXJlKCk7XG4gICAgaWYgKGNvbnRpbnVlR2FtZSkgY3VycmVudFBsYXllciA9IG5leHRQbGF5ZXIoKTtcbiAgfVxuXG4gIGRvbS5kaXNwbGF5R2FtZU92ZXJTY3JlZW4oY3VycmVudFBsYXllcik7XG59O1xuXG5leHBvcnQgeyBnYW1lIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVHYW1lQm9hcmQgfSBmcm9tIFwiLi9nYW1lQm9hcmQuanNcIjtcblxuY29uc3QgY3JlYXRlSHVtYW5QbGF5ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGdhbWVCb2FyZCA9IGNyZWF0ZUdhbWVCb2FyZCgpO1xuICByZXR1cm4geyBnYW1lQm9hcmQgfTtcbn07XG5cbmNvbnN0IGNyZWF0ZUNvbXB1dGVyUGxheWVyID0gKCkgPT4ge1xuICBjb25zdCBnYW1lQm9hcmQgPSBjcmVhdGVHYW1lQm9hcmQoKTtcbiAgY29uc3QgYXR0YWNrID0gKCkgPT4ge1xuICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoOSArIDEpKTtcbiAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDkgKyAxKSk7XG4gICAgcmV0dXJuIFtbeCwgeV0sIHkgKiAxMCArIHhdO1xuICB9O1xuICByZXR1cm4geyBnYW1lQm9hcmQsIGF0dGFjayB9O1xufTtcbmV4cG9ydCB7IGNyZWF0ZUNvbXB1dGVyUGxheWVyLCBjcmVhdGVIdW1hblBsYXllciB9O1xuIiwiaW1wb3J0IFwiLi9yZXNldC5jc3NcIjtcbmltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5pbXBvcnQgeyBnYW1lIH0gZnJvbSBcIi4vZ2FtZUNvbnRyb2xsZXJcIjtcblxuZ2FtZSgpO1xuXG5jb25zdCBnYW1lT3ZlclNjcmVlbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZC0tZ2FtZS1vdmVyLXNjcmVlblwiKTtcbmNvbnN0IG5ld0dhbWVCVE4gPSBnYW1lT3ZlclNjcmVlbi5xdWVyeVNlbGVjdG9yKFwiYnV0dG9uXCIpO1xubmV3R2FtZUJUTi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBnYW1lT3ZlclNjcmVlbi5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICBnYW1lKCk7XG59KTtcblxuLy8gY2FsbCBnYW1lIGluaXRpYWxseS5cbi8vIGp1c3QgYWRkIGEgbGlzdGVuZXIgZm9yIHRoZSBidXR0b24uIFdoZW4gaXRzIGNsaWNrZWQsIHBsYXkgdGhlIGdhbWVcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJsb2NhbHMiLCJjcmVhdGVTaGlwIiwic2l6ZSIsImhpdHMiLCJoaXQiLCJpc1N1bmsiLCJnZXRTaXplIiwiY3JlYXRlR2FtZUJvYXJkIiwic2hpcHMiLCJjdXJyZW50U2hpcEluZGV4IiwiZ3JpZCIsIkFycmF5IiwiZnJvbSIsInR5cGUiLCJzaGlwIiwiaGl0U3RhdHVzIiwiaXNWYWxpZFNwb3QiLCJzaGlwTGVuIiwiY29vcmRzIiwiaG9yaXpvbnRhbCIsInZhbGlkIiwieCIsInkiLCJjdXJyZW50VGlsZSIsImdldEdyaWQiLCJwbGFjZVNoaXAiLCJwbGFjZWRTaGlwIiwic2hpcFRpbGVzIiwicmV0dXJuQXJyIiwiZ2V0VG9CZVNoaXBUaWxlcyIsImZvckVhY2giLCJ0aWxlIiwidW5hdmFpbGFibGVUaWxlcyIsImRYIiwiZFkiLCJzaGlwWCIsInNoaXBZIiwiaiIsImluY2x1ZGVzIiwiZ2V0VG9CZVVuYXZhaWxhYmxlVGlsZXMiLCJmaXJlU2hvdCIsImFsbFNoaXBzU3VuayIsImV2ZXJ5IiwicmVzZXRHcmlkIiwiYWxsU2hpcHNQbGFjZWQiLCJET01NYW5pcHVsYXRvciIsImRyYXdHcmlkIiwicGxheWVyIiwiZ2FtZUJvYXJkIiwiZmxhdCIsImdhbWVCb2FyZERPTSIsImF0dGFjayIsImlubmVySFRNTCIsImNlbGwiLCJjZWxsRE9NIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YVNldEFyciIsImhhbmRsZURyYWdzIiwiZHJhZ2dhYmxlIiwiY2VsbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaG92ZXJlZE92ZXJDb29yZHMiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJvcGFjaXR5IiwiZGF0YVRyYW5zZmVyIiwic2V0RHJhZ0ltYWdlIiwib25jZSIsImNvbnNvbGUiLCJsb2ciLCJuZXdTaGlwU2l6ZSIsInNoaXBDZWxsRHJhZyIsImRhdGFzZXQiLCJzaGlwU2l6ZSIsInVwZGF0ZURyYWdnYWJsZSIsInBvcCIsIk1hdGgiLCJmbG9vciIsInJldHVybkNsaWNrZWRDZWxsQ29vcmRzIiwiYXN5bmMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInBsYXllclNob3QiLCJlbmVteSIsImNlbGxOVU0iLCJjb250YWlucyIsImRpc3BsYXlHYW1lT3ZlclNjcmVlbiIsIndpbm5lciIsImdhbWVPdmVyU2NyZWVuIiwidGV4dENvbnRlbnQiLCJjbGlja2VkUmVhZHlTaGlwcyIsImJ0biIsImdyZXlPdXRTaGlwQnV0dG9ucyIsImRpc2FibGVkIiwidW5HcmV5U2hpcEJ1dHRvbnMiLCJnYW1lIiwiZG9tIiwiY29tcHV0ZXIiLCJyYW5kb20iLCJjdXJyZW50UGxheWVyIiwibmV4dFBsYXllciIsInJhbmRvbWl6ZVNoaXBzIiwicCIsImNvbnRpbnVlR2FtZSIsImN1cnJlbnRQbGF5ZXJGaXJlIiwiZmlyZUNvb3JkcyIsInNob3RSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=