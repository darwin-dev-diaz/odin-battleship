(()=>{"use strict";var e={430:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),a=t.n(r),o=t(314),s=t.n(o)()(a());s.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}"],sourceRoot:""}]);const i=s},208:(e,n,t)=>{t.d(n,{A:()=>i});var r=t(354),a=t.n(r),o=t(314),s=t.n(o)()(a());s.push([e.id,'html {\n  user-select: none;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-container {\n  display: flex;\n  gap: 20px;\n  justify-content: start;\n  align-items: start;\n}\n\n.container-one,\n.container-two,\n.container-three {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n.p-game-board,\n.c-game-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n.d-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n}\n\n.cell {\n  position: relative;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.cell:hover {\n  z-index: 99;\n  transform: scale(1.2);\n  border-width: 2px;\n  /* background-color: rgb(172, 234, 172); */\n\n  cursor: pointer;\n}\n\n.cell.over {\n  background-color: #a9ffa9;\n}\n\n.cell.over--invalid {\n  background-color: #ffd0cb;\n}\n\n.copy-cursor {\n  cursor: copy !important;\n}\n\n.cell--ship {\n  background-color: #a9a9ff;\n}\n\n.cell--unavailable {\n  background-color: #d8d8d8;\n}\n\n.cell--undiscovered {\n  background-color: rgba(255, 255, 255, 0.851) !important;\n}\n\n.cell--miss {\n  background-color: #fafad2;\n  position: relative;\n}\n\n.cell--miss::after {\n  content: ""; /* Required for the pseudo-element to be generated */\n  position: absolute;\n  width: 5px; /* Size of the dot */\n  height: 5px; /* Size of the dot */\n  background-color: black; /* Color of the dot */\n  top: 50%; /* Center vertically */\n  left: 50%; /* Center horizontally */\n  border-radius: 50%; /* Makes the shape a circle */\n  transform: translate(-50%, -50%); /* Offset the dot to truly center it */\n}\n\n.cell--hit {\n  position: relative;\n  background-color: #fafad2;\n  border-color: #ff0000;\n  border-width: 1.5px;\n}\n\n.cell--hit::before,\n.cell--hit::after {\n  content: "";\n  position: absolute;\n  width: 2px; /* Width of the "X" lines */\n  height: 150%; /* Adjusted to fit the square */\n  top: -25%; /* Adjusted for better centering */\n  left: 50%; /* Center horizontally */\n  background-color: red; /* Color of the "X" */\n  transform: translateX(-50%); /* Center the line\'s width */\n}\n\n.cell--hit::before {\n  transform: translateX(-50%) rotate(45deg); /* Center and rotate one line to form one slash of the "X" */\n}\n\n.cell--hit::after {\n  transform: translateX(-50%) rotate(-45deg); /* Center and rotate the other line to form the other slash of the "X" */\n}\n\n.next-piece-box {\n  height: 150px;\n  width: 150px;\n  border: 2px solid black;\n  border-radius: 10px;\n  background-color: rgb(238, 238, 238);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.next-piece-box.greyed-out {\n  opacity: 0.1;\n  pointer-events: none;\n}\n\n.ship-draggable {\n  display: grid;\n}\n\n.ship-draggable.ship-draggable--size-4 {\n  grid-template-columns: repeat(4, 30px);\n  grid-template-rows: 30px;\n}\n.ship-draggable.ship-draggable--size-3 {\n  grid-template-columns: repeat(3, 30px);\n  grid-template-rows: 30px;\n}\n.ship-draggable.ship-draggable--size-2 {\n  grid-template-columns: repeat(2, 30px);\n  grid-template-rows: 30px;\n}\n.ship-draggable.ship-draggable--size-1 {\n  grid-template-columns: repeat(1, 30px);\n  grid-template-rows: 30px;\n}\n\n.ship-draggable.ship-draggable--size-4.vertical {\n  grid-template-rows: repeat(4, 30px);\n  grid-template-columns: 30px;\n}\n.ship-draggable.ship-draggable--size-3.vertical {\n  grid-template-rows: repeat(3, 30px);\n  grid-template-columns: 30px;\n}\n.ship-draggable.ship-draggable--size-2.vertical {\n  grid-template-rows: repeat(2, 30px);\n  grid-template-columns: 30px;\n}\n.ship-draggable.ship-draggable--size-1.vertical {\n  grid-template-rows: repeat(1, 30px);\n  grid-template-columns: 30px;\n}\n\n.ship-cell-drag {\n  background-color: #a9a9ff;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.d--game-over-screen {\n  background-color: #a9ffa9;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 30px;\n}\n\nh2 {\n  font-size: 20px;\n}\nh3 {\n  font-size: 30px;\n}\nh4 {\n  font-size: 20px;\n}\n\n.shake {\n  animation: shake 500ms ease-out;\n  border-color: #900;\n  background-color: #fdd;\n}\n@keyframes shake {\n  0% {\n    transform: translateX(0);\n  }\n  5% {\n    transform: translateX(-15px);\n  }\n  15% {\n    transform: translateX(15px);\n  }\n  25% {\n    transform: translateX(-15px);\n  }\n  35% {\n    transform: translateX(15px);\n  }\n  45% {\n    transform: translateX(-15px);\n  }\n  55% {\n    transform: translateX(15px);\n  }\n  65% {\n    transform: translateX(-15px);\n  }\n  75% {\n    transform: translateX(6px);\n  }\n  85% {\n    transform: translateX(-6px);\n  }\n  100% {\n    transform: translateX(0);\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['html {\n  user-select: none;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.game-container {\n  display: flex;\n  gap: 20px;\n  justify-content: start;\n  align-items: start;\n}\n\n.container-one,\n.container-two,\n.container-three {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 20px;\n}\n\n.p-game-board,\n.c-game-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n}\n.d-board {\n  border: 3px solid black;\n  padding: 10px;\n  background-color: rgba(255, 255, 255, 0.851);\n  height: 300px;\n  width: 300px;\n}\n\n.cell {\n  position: relative;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.cell:hover {\n  z-index: 99;\n  transform: scale(1.2);\n  border-width: 2px;\n  /* background-color: rgb(172, 234, 172); */\n\n  cursor: pointer;\n}\n\n.cell.over {\n  background-color: #a9ffa9;\n}\n\n.cell.over--invalid {\n  background-color: #ffd0cb;\n}\n\n.copy-cursor {\n  cursor: copy !important;\n}\n\n.cell--ship {\n  background-color: #a9a9ff;\n}\n\n.cell--unavailable {\n  background-color: #d8d8d8;\n}\n\n.cell--undiscovered {\n  background-color: rgba(255, 255, 255, 0.851) !important;\n}\n\n.cell--miss {\n  background-color: #fafad2;\n  position: relative;\n}\n\n.cell--miss::after {\n  content: ""; /* Required for the pseudo-element to be generated */\n  position: absolute;\n  width: 5px; /* Size of the dot */\n  height: 5px; /* Size of the dot */\n  background-color: black; /* Color of the dot */\n  top: 50%; /* Center vertically */\n  left: 50%; /* Center horizontally */\n  border-radius: 50%; /* Makes the shape a circle */\n  transform: translate(-50%, -50%); /* Offset the dot to truly center it */\n}\n\n.cell--hit {\n  position: relative;\n  background-color: #fafad2;\n  border-color: #ff0000;\n  border-width: 1.5px;\n}\n\n.cell--hit::before,\n.cell--hit::after {\n  content: "";\n  position: absolute;\n  width: 2px; /* Width of the "X" lines */\n  height: 150%; /* Adjusted to fit the square */\n  top: -25%; /* Adjusted for better centering */\n  left: 50%; /* Center horizontally */\n  background-color: red; /* Color of the "X" */\n  transform: translateX(-50%); /* Center the line\'s width */\n}\n\n.cell--hit::before {\n  transform: translateX(-50%) rotate(45deg); /* Center and rotate one line to form one slash of the "X" */\n}\n\n.cell--hit::after {\n  transform: translateX(-50%) rotate(-45deg); /* Center and rotate the other line to form the other slash of the "X" */\n}\n\n.next-piece-box {\n  height: 150px;\n  width: 150px;\n  border: 2px solid black;\n  border-radius: 10px;\n  background-color: rgb(238, 238, 238);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.next-piece-box.greyed-out {\n  opacity: 0.1;\n  pointer-events: none;\n}\n\n.ship-draggable {\n  display: grid;\n}\n\n.ship-draggable.ship-draggable--size-4 {\n  grid-template-columns: repeat(4, 30px);\n  grid-template-rows: 30px;\n}\n.ship-draggable.ship-draggable--size-3 {\n  grid-template-columns: repeat(3, 30px);\n  grid-template-rows: 30px;\n}\n.ship-draggable.ship-draggable--size-2 {\n  grid-template-columns: repeat(2, 30px);\n  grid-template-rows: 30px;\n}\n.ship-draggable.ship-draggable--size-1 {\n  grid-template-columns: repeat(1, 30px);\n  grid-template-rows: 30px;\n}\n\n.ship-draggable.ship-draggable--size-4.vertical {\n  grid-template-rows: repeat(4, 30px);\n  grid-template-columns: 30px;\n}\n.ship-draggable.ship-draggable--size-3.vertical {\n  grid-template-rows: repeat(3, 30px);\n  grid-template-columns: 30px;\n}\n.ship-draggable.ship-draggable--size-2.vertical {\n  grid-template-rows: repeat(2, 30px);\n  grid-template-columns: 30px;\n}\n.ship-draggable.ship-draggable--size-1.vertical {\n  grid-template-rows: repeat(1, 30px);\n  grid-template-columns: 30px;\n}\n\n.ship-cell-drag {\n  background-color: #a9a9ff;\n  border: 0.5px solid rgb(116, 116, 116);\n}\n\n.d--game-over-screen {\n  background-color: #a9ffa9;\n  height: 100%;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 30px;\n}\n\nh2 {\n  font-size: 20px;\n}\nh3 {\n  font-size: 30px;\n}\nh4 {\n  font-size: 20px;\n}\n\n.shake {\n  animation: shake 500ms ease-out;\n  border-color: #900;\n  background-color: #fdd;\n}\n@keyframes shake {\n  0% {\n    transform: translateX(0);\n  }\n  5% {\n    transform: translateX(-15px);\n  }\n  15% {\n    transform: translateX(15px);\n  }\n  25% {\n    transform: translateX(-15px);\n  }\n  35% {\n    transform: translateX(15px);\n  }\n  45% {\n    transform: translateX(-15px);\n  }\n  55% {\n    transform: translateX(15px);\n  }\n  65% {\n    transform: translateX(-15px);\n  }\n  75% {\n    transform: translateX(6px);\n  }\n  85% {\n    transform: translateX(-6px);\n  }\n  100% {\n    transform: translateX(0);\n  }\n}\n'],sourceRoot:""}]);const i=s},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var A=this[i][0];null!=A&&(s[A]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&s[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},s=[],i=0;i<e.length;i++){var A=e[i],l=r.base?A[0]+r.base:A[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var p=t(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var g=a(u,r);r.byIndex=i,n.splice(i,0,{identifier:d,updater:g,references:1})}s.push(d)}return s}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var i=t(o[s]);n[i].references--}for(var A=r(e,a),l=0;l<o.length;l++){var c=t(o[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}o=A}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(72),n=t.n(e),r=t(825),a=t.n(r),o=t(659),s=t.n(o),i=t(56),A=t.n(i),l=t(540),c=t.n(l),d=t(113),p=t.n(d),u=t(430),g={};g.styleTagTransform=p(),g.setAttributes=A(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=c(),n()(u.A,g),u.A&&u.A.locals&&u.A.locals;var h=t(208),m={};m.styleTagTransform=p(),m.setAttributes=A(),m.insert=s().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=c(),n()(h.A,m),h.A&&h.A.locals&&h.A.locals;const C=e=>{let n=0;return{hit:()=>{n+=1},isSunk:()=>n>=e,getSize:()=>e}},f=()=>{const e=[C(4),C(3),C(3),C(2),C(2),C(2),C(1),C(1),C(1),C(1)];let n=0,t=Array.from({length:10},(()=>Array.from({length:10},(()=>({type:"empty",ship:null,hitStatus:"undiscovered"})))));const r=(e,n,r)=>{let a=!0,o=n[0],s=n[1];for(let n=0;n<e;n++){if(o>9||s>9)return!1;const e=t[s][o];if(!e||"empty"!==e.type){a=!1;break}r?o+=1:s+=1}return a};return{getGrid:()=>t,placeShip:(a=e[n],o,s)=>{if(a){let e=r(a.getSize(),o,s);if(e){n++;const e=((e,n,r)=>{const a=[];let o=n[0],s=n[1];for(let n=0;n<e;n++)a.push(t[s][o]),r?o+=1:s+=1;return a})(a.getSize(),o,s);e.forEach((e=>{e.type="ship",e.ship=a}));const r=((e,n,r)=>{const a=[],o=[0,1,1,1,0,-1,-1,-1],s=[-1,-1,0,1,1,1,0,-1];let i=n[0],A=n[1];for(let n=0;n<e;n++){for(let e=0;e<8;e++){const n=i+o[e],r=A+s[e];n>-1&&n<10&&r>-1&&r<10&&"empty"===t[r][n].type&&!a.includes(t[r][n])&&a.push(t[r][n])}r?i+=1:A+=1}return a})(a.getSize(),o,s);r.forEach((e=>e.type="unavailable"))}return e}return!1},fireShot:e=>{const n=e[0],r=e[1];return"undiscovered"===t[r][n].hitStatus&&("empty"===t[r][n].type||"unavailable"===t[r][n].type?(t[r][n].hitStatus="missed","miss"):"ship"===t[r][n].type?(t[r][n].hitStatus="hit",t[r][n].ship.hit(),"hit"):void 0)},allShipsSunk:()=>e.every((e=>e.isSunk())),resetGrid:()=>{t=Array.from({length:10},(()=>Array.from({length:10},(()=>({type:"empty",ship:null,hitStatus:"undiscovered"}))))),n=0},allShipsPlaced:()=>n>8,isValidSpot:r,ships:e}},E=()=>{const e=e=>{const n=e.gameBoard.getGrid().flat(),t=e.attack?document.querySelector(".c-game-board"):document.querySelector(".p-game-board");t.innerHTML="",n.forEach((n=>{const r=document.createElement("div");r.className=(e.attack,"cell"),"ship"===n.type?r.classList.add("cell--ship"):"unavailable"===n.type&&r.classList.add("cell--unavailable"),t.appendChild(r)}))},n=e=>{const n=document.querySelector(".ship-draggable");n.innerHTML="";for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("ship-cell-drag"),n.appendChild(e)}n.className=`ship-draggable ship-draggable--size-${e}`,n.dataset.shipSize=`${e}`};let t=[1,1,1,1,2,2,2,3,3];const r=a=>{const o=document.querySelector(".p-game-board"),s=document.querySelector(".ship-draggable"),i=o.querySelectorAll(".cell"),A=[99,99];let l=!0;document.addEventListener("keydown",(e=>{"r"===e.key&&(s.classList.add("vertical"),l=!1)})),document.addEventListener("keyup",(e=>{"r"===e.key&&(s.classList.remove("vertical"),l=!0)})),o.addEventListener("dragover",(e=>{e.preventDefault()})),o.addEventListener("drop",(r=>{r.preventDefault(),i.forEach((e=>{e.classList.remove("over"),e.classList.remove("over--invalid")})),s.style.opacity="1",a.gameBoard.placeShip(void 0,A,l)&&(e(a),n(t.pop())),console.log("now")}),{once:!0}),s.addEventListener("dragstart",(function(e){this.style.opacity="0.3",e.dataTransfer.setDragImage(s,15,15)}),{once:!0}),s.addEventListener("dragend",(()=>{s.style.opacity="1",r(a)}),{once:!0}),i.forEach(((e,n)=>{e.addEventListener("dragleave",(()=>{e.classList.remove("over"),e.classList.remove("over--invalid")})),e.addEventListener("dragenter",(()=>{A[0]=n%10,A[1]=Math.floor(n/10%10),e.classList.add(a.gameBoard.isValidSpot(s.dataset.shipSize,A,l)?"over":"over--invalid")}))}))};return{drawGrid:e,returnClickedCellCoords:async e=>new Promise(((n,t)=>{(e.attack?document.querySelector(".c-game-board"):document.querySelector(".p-game-board")).querySelectorAll(".cell").forEach(((e,t)=>{e.addEventListener("click",(e=>{const r=t%10,a=Math.floor(t/10%10);n([[r,a],t])}),{once:!0})}))})),playerShot:(e,n)=>{const t=(e.attack?document.querySelector(".c-game-board"):document.querySelector(".p-game-board")).querySelectorAll(".cell")[n];t.classList.contains("cell--ship")?t.className="cell cell--hit":(t.classList.contains("cell--unavailable")||"cell cell--undiscovered"===t.className||"cell"===t.className)&&(t.className="cell cell--miss")},displayGameOverScreen:e=>{const n=document.querySelector(".d--game-over-screen");n.querySelector("span").textContent=e.attack?"COMPUTER":"YOU",n.classList.remove("hidden")},clickedReadyShips:async e=>{const n=document.querySelector("#ready-ships-btn");return new Promise(((t,r)=>{n.addEventListener("click",(()=>{if(e.gameBoard.allShipsPlaced())t();else{const e=document.querySelector(".next-piece-box");e.classList.add("shake"),e.addEventListener("animationend",(()=>e.classList.remove("shake")),{once:!0})}}))}))},greyOutShipButtons:()=>{document.querySelector(".ship-btns").querySelectorAll("button").forEach((e=>{e.disabled=!0}))},unGreyShipButtons:()=>{document.querySelector(".ship-btns").querySelectorAll("button").forEach((e=>{e.disabled=!1}))},handleDrags:r,resetShipSizeArr:()=>{t=[1,1,1,1,2,2,2,3,3],n(4)},greyOutShipSelection:()=>{document.querySelector(".next-piece-box").classList.add("greyed-out")},unGreyShipSelection:()=>{document.querySelector(".next-piece-box").classList.remove("greyed-out")}}},b=async()=>{const e=E(),n={gameBoard:f()},t=(()=>{const e=f(),n=[99,99];let t=!1,r=!1;const a=[99,99],o=[99,99],s=(e,t=!1)=>{if(t){const e=[n[0]+t[0],n[1]+t[1]];if(e[0]>-1&&e[0]<10&&e[1]>-1&&e[1]<10)return e}const r=[];return[[n[0],n[1]+1],[n[0],n[1]-1],[n[0]-1,n[1]],[n[0]+1,n[1]]].forEach((n=>{n[0]>-1&&n[0]<10&&n[1]>-1&&n[1]<10&&"undiscovered"===e.getGrid()[n[1]][n[0]].hitStatus&&r.push(n)})),r};return{gameBoard:e,attack:(e,i=!1)=>{if(t&&r){99===o[0]&&([o[0],o[1]]=[n[0]-a[0],n[1]-a[1]]);const t=s(e.gameBoard,o);if(!Array.isArray(t[0]))return[n[0],n[1]]=[t[0],t[1]],[[t[1],t[0]],10*t[1]+t[0]]}else if(t&&!r){r=!0,[a[0],a[1]]=[n[0],n[1]];const t=s(e.gameBoard),o=t.length?t[Math.floor(Math.random()*t.length)]:0;if(console.log({previousAttack:n,validNextMoves:t,nextMove:o}),t.length&&!i)return[n[0],n[1]]=[o[0],o[1]],[o,10*o[1]+o[0]]}const A=Math.floor(10*Math.random()),l=Math.floor(10*Math.random());return[n[0],n[1]]=[A,l],i?([n[0],n[1]]=[i[0],i[1]],[[i[1],i[0]],10*i[1]+i[0]]):[[A,l],10*l+A]},prevAttackSuccessful:()=>t=!0,prevAttackUnSuccessful:()=>{[t,r]=[!1,!1],[a[0],a[1]]=[99,99],[o[0],o[1]]=[99,99]},getPrevAttackStatus:()=>t,getPrevAttack:()=>n}})();let r=n;const a=()=>r===n?t:n;e.unGreyShipButtons(),e.unGreyShipSelection(),e.drawGrid(n),e.drawGrid(t),e.handleDrags(n);const o=n=>{n.gameBoard.resetGrid();for(let e=0;e<10;e++)for(;;){const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random());if(n.gameBoard.placeShip(void 0,[e,t],e%2==0))break}e.drawGrid(n)};document.querySelector("#reset-ships-btn").addEventListener("click",(()=>{n.gameBoard.resetGrid(),e.drawGrid(n),e.resetShipSizeArr(),e.handleDrags(n)}));const s=document.querySelector("#randomize-ships-btn");s.replaceWith(s.cloneNode(!0)),document.querySelector("#randomize-ships-btn").addEventListener("click",(()=>{o(n)}));const i=document.querySelector("#test-ships-btn");i.replaceWith(i.cloneNode(!0)),document.querySelector("#test-ships-btn").addEventListener("click",(()=>{n.gameBoard.resetGrid(),n.gameBoard.placeShip(void 0,[0,0],!0),n.gameBoard.placeShip(void 0,[0,2],!0),n.gameBoard.placeShip(void 0,[0,4],!0),n.gameBoard.placeShip(void 0,[0,6],!0),n.gameBoard.placeShip(void 0,[0,7],!0),n.gameBoard.placeShip(void 0,[0,8],!0),n.gameBoard.placeShip(void 0,[5,0],!0),n.gameBoard.placeShip(void 0,[5,2],!0),n.gameBoard.placeShip(void 0,[5,4],!0),n.gameBoard.placeShip(void 0,[5,6],!0),n.gameBoard.placeShip(void 0,[5,8],!0),e.drawGrid(n)})),await e.clickedReadyShips(n),e.greyOutShipButtons(),e.greyOutShipSelection(),t.gameBoard.resetGrid(),o(t);let A=!0,l=!0;const c=async()=>{let n;l&&r.attack?(console.log("NOW"),n=r.attack(a(),[0,0]),l=!1):n=r.attack?r.attack(a()):await e.returnClickedCellCoords(a());const t=a().gameBoard.fireShot(n[0]);return"hit"===t?(r.attack&&r.prevAttackSuccessful(),e.playerShot(a(),n[1]),!a().gameBoard.allShipsSunk()&&c()):"miss"===t?(r.attack&&r.prevAttackUnSuccessful(),e.playerShot(a(),n[1]),!0):c()};for(;A;)A=await c(),A&&(r=a());e.displayGameOverScreen(r)};!async function(){await b(),console.log("Game finished running");const e=document.querySelector(".d--game-over-screen");e.querySelector("button").addEventListener("click",(async()=>{e.classList.add("hidden"),await b()}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,